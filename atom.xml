<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V2Say</title>
  <subtitle>U see U say</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://v2say.com/"/>
  <updated>2017-03-30T12:32:31.050Z</updated>
  <id>https://v2say.com/</id>
  
  <author>
    <name>Floor23</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://v2say.com/2017/03/30/Markdown%20Tutorial%20Inline%20Syntax/"/>
    <id>https://v2say.com/2017/03/30/Markdown Tutorial Inline Syntax/</id>
    <published>2017-03-30T12:32:31.012Z</published>
    <updated>2017-03-30T12:32:31.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>
<p>In both styles, the link text is delimited by [square brackets].</p>
<p>To create an inline link, use a set of regular parentheses immediately<br>after the link text’s closing square bracket. Inside the parentheses,<br>put the URL where you want the link to point, along with an <em>optional</em><br>title for the link, surrounded in quotes. For example:</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>Will produce:</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre><p>If you’re referring to a local resource on the same server, you can<br>use relative paths:</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p>Reference-style links use a second set of square brackets, inside<br>which you place a label of your choosing to identify the link:</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>You can optionally use a space to separate the sets of brackets:</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre><p>Then, anywhere in the document, you define your link label like this,<br>on a line by itself:</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>That is:</p>
<ul>
<li>Square brackets containing the link identifier (optionally<br>indented from the left margin using up to three spaces);</li>
<li>followed by a colon;</li>
<li>followed by one or more spaces (or tabs);</li>
<li>followed by the URL for the link;</li>
<li>optionally followed by a title attribute for the link, enclosed<br>in double or single quotes, or enclosed in parentheses.</li>
</ul>
<p>The following three link definitions are equivalent:</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>Note:</strong> There is a known bug in Markdown.pl 1.0.1 which prevents<br>single quotes from being used to delimit link titles.</p>
<p>The link URL may, optionally, be surrounded by angle brackets:</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre><p>You can put the title attribute on the next line and use extra spaces<br>or tabs for padding, which tends to look better with longer URLs:</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
</code></pre><p>Link definitions are only used for creating links during Markdown<br>processing, and are stripped from your document in the HTML output.</p>
<p>Link definition names may consist of letters, numbers, spaces, and<br>punctuation – but they are <em>not</em> case sensitive. E.g. these two<br>links:</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p>are equivalent.</p>
<p>The <em>implicit link name</em> shortcut allows you to omit the name of the<br>link, in which case the link text itself is used as the name.<br>Just use an empty set of square brackets – e.g., to link the word<br>“Google” to the google.com web site, you could simply write:</p>
<pre><code>[Google][]
</code></pre><p>And then define the link:</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>Because link names may contain spaces, this shortcut even works for<br>multiple words in the link text:</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre><p>And then define the link:</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre><p>Link definitions can be placed anywhere in your Markdown document. I<br>tend to put them immediately after each paragraph in which they’re<br>used, but if you want, you can put them all at the end of your<br>document, sort of like footnotes.</p>
<p>Here’s an example of reference links in action:</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>Using the implicit link name shortcut, you could instead write:</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>Both of the above examples will produce the following HTML output:</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre><p>For comparison, here is the same paragraph written using<br>Markdown’s inline link style:</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>The point of reference-style links is not that they’re easier to<br>write. The point is that with reference-style links, your document<br>source is vastly more readable. Compare the above examples: using<br>reference-style links, the paragraph itself is only 81 characters<br>long; with inline-style links, it’s 176 characters; and as raw HTML,<br>it’s 234 characters. In the raw HTML, there’s more markup than there<br>is text.</p>
<p>With Markdown’s reference-style links, a source document much more<br>closely resembles the final output, as rendered in a browser. By<br>allowing you to move the markup-related metadata out of the paragraph,<br>you can add links without interrupting the narrative flow of your<br>prose.</p>
<h3 id="em">Emphasis</h3>

<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of<br>emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an<br>HTML <code>&lt;em&gt;</code> tag; double <code>*</code>‘s or <code>_</code>‘s will be wrapped with an HTML<br><code>&lt;strong&gt;</code> tag. E.g., this input:</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>will produce:</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p>You can use whichever style you prefer; the lone restriction is that<br>the same character must be used to open and close an emphasis span.</p>
<p>Emphasis can be used in the middle of a word:</p>
<pre><code>un*frigging*believable
</code></pre><p>But if you surround an <code>*</code> or <code>_</code> with spaces, it’ll be treated as a<br>literal asterisk or underscore.</p>
<p>To produce a literal asterisk or underscore at a position where it<br>would otherwise be used as an emphasis delimiter, you can backslash<br>escape it:</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre><h3 id="code">Code</h3>

<p>To indicate a span of code, wrap it with backtick quotes (<code>` </code>).<br>Unlike a pre-formatted code block, a code span indicates code within a<br>normal paragraph. For example:</p>
<pre><code>Use the `printf()` function.
</code></pre><p>will produce:</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>To include a literal backtick character within a code span, you can use<br>multiple backticks as the opening and closing delimiters:</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>which will produce this:</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>The backtick delimiters surrounding a code span may include spaces –<br>one after the opening, one before the closing. This allows you to place<br>literal backtick characters at the beginning or end of a code span:</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>will produce:</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>With a code span, ampersands and angle brackets are encoded as HTML<br>entities automatically, which makes it easy to include example HTML<br>tags. Markdown will turn this:</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>into:</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>You can write this:</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>to produce:</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre><h3 id="img">Images</h3>

<p>Admittedly, it’s fairly difficult to devise a “natural” syntax for<br>placing images into a plain text document format.</p>
<p>Markdown uses an image syntax that is intended to resemble the syntax<br>for links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>
<p>Inline image syntax looks like this:</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>That is:</p>
<ul>
<li>An exclamation mark: <code>!</code>;</li>
<li>followed by a set of square brackets, containing the <code>alt</code><br>attribute text for the image;</li>
<li>followed by a set of parentheses, containing the URL or path to<br>the image, and an optional <code>title</code> attribute enclosed in double<br>or single quotes.</li>
</ul>
<p>Reference-style image syntax looks like this:</p>
<pre><code>![Alt text][id]
</code></pre><p>Where “id” is the name of a defined image reference. Image references<br>are defined using syntax identical to link references:</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>As of this writing, Markdown has no syntax for specifying the<br>dimensions of an image; if this is important to you, you can simply<br>use regular HTML <code>&lt;img&gt;</code> tags.</p>
<hr>
<h2 id="misc">Miscellaneous</h2>

<h3 id="autolink">Automatic Links</h3>

<p>Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown will turn this into:</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>Automatic links for email addresses work similarly, except that<br>Markdown will also perform a bit of randomized decimal and hex<br>entity-encoding to help obscure your address from address-harvesting<br>spambots. For example, Markdown will turn this:</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>into something like this:</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>which will render in a browser as a clickable link to “address@example.com”.</p>
<p>(This sort of entity-encoding trick will indeed fool many, if not<br>most, address-harvesting bots, but it definitely won’t fool all of<br>them. It’s better than nothing, but an address published in this way<br>will probably eventually start receiving spam.)</p>
<h3 id="backslash">Backslash Escapes</h3>

<p>Markdown allows you to use backslash escapes to generate literal<br>characters which would otherwise have special meaning in Markdown’s<br>formatting syntax. For example, if you wanted to surround a word<br>with literal asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can use<br>backslashes before the asterisks, like this:</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown provides backslash escapes for the following characters:</p>
<pre><code>\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+    plus sign
-    minus sign (hyphen)
.   dot
!   exclamation mark
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内联元素&quot;&gt;&lt;a href=&quot;#内联元素&quot; class=&quot;headerlink&quot; title=&quot;内联元素&quot;&gt;&lt;/a&gt;内联元素&lt;/h2&gt;&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown Tutorial Block Syntax</title>
    <link href="https://v2say.com/2017/03/30/Markdown%20Tutorial%20Block%20Syntax/"/>
    <id>https://v2say.com/2017/03/30/Markdown Tutorial Block Syntax/</id>
    <published>2017-03-30T05:12:30.000Z</published>
    <updated>2017-03-30T12:48:49.511Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 语法<br>作者：JOHN GRUBER<br>翻译：OOoo</p>
<p><strong>注:</strong> 该文档就是采用 Markdown 语法进行编辑的。</p>
<hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 标记语言产生的意义就是让文本编辑能够更容易的读和写。</p>
<p>可读性最重要。可发布的 Markdown 标记的文档应该是纯文本，不应该包含用来格式化的标记。Markdown 语法由标点符号标记，标点符号的选择尽量展示其最原始的含义。例如用<code>*</code>强调，<code>&gt;</code>表示引用等等。</p>
<p>Markdown 并不是 HTML 的替代品，它仅仅支持 HTML 的部分标签。HTML 是<em>发布</em>格式，Markdown 是<em>书写</em>格式。如果想要使用HTML中的其他标签，可以直接在Markdown文档中使用。</p>
<p>Markdown语法对块级别的HTML元素有使用限制 – 例如 <code>&lt;div&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;pre&gt;</code>，<code>&lt;p&gt;</code>，等等。在使用的时候必须在块的头和尾加入空行，并且头和尾标记不能有缩进。</p>
<p>例如在Markdown文档中添加HTML表格语法如下:</p>
<pre><code>上一段落

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;table content&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

下一段落
</code></pre><p><strong>注意:</strong> Markdown语法在上述块内不起作用，例如在HTML块中使用<strong>强调</strong>不起作用。</p>
<p>内联级别的 HTML 标签，– 例如 <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, 或者 <code>&lt;del&gt;</code> – 可以在任何地方使用。和块级 HTML 标签不一样的地方就是，Markdown 语法<strong>会解析</strong>内联级别内的内容。</p>
<hr>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在 HTML 中，<code>&lt;</code> 和 <code>&amp;</code> 需要特殊处理。<code>&lt;</code> 标示标签的开始，<code>&amp;</code> 标示HTML实体。如果要使用，必须采用 <code>&amp;lt;</code>和<code>&amp;amp;</code>来标示&lt;和&amp;。这个是比较麻烦的一点，例如要写“AT&amp;T”，在 Markdown 文档中必须写作 <code>AT&amp;amp;T</code>。甚至在文档中插入 URL，也需要转义，例如：</p>
<pre><code>https://v2say.com/100000?page=1&amp;num=10
</code></pre><p>必须写作：</p>
<pre><code>https://v2say.com/100000?page=1&amp;amp;num=10
</code></pre><p>需要记住以上必须转义的地方，例如 <code>&amp;copy</code> 即 &copy; 标示版权的标记就不需要转义。</p>
<hr>
<h2 id="区块标记"><a href="#区块标记" class="headerlink" title="区块标记"></a>区块标记</h2><hr>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一段话由一行或多行文本组成，并由一个或多个空行「仅包含tab 或 空格」隔开。如果想要另起一段，则在句末添加两个或多个空格，然后再回车。</p>
<hr>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题标示法：</p>
<ol>
<li>标题下方用等号或者短横标示，例如：<br> 大标题<br>=<br> 小标题<br> -</li>
</ol>
<p><code>=</code> 和 <code>-</code> 的数量不限，效果如下：</p>
<p>大标题<br>=<br>小标题<br>-</p>
<ol>
<li>用 <code>#</code> 在标题头部标示， <code>#</code> 后保留一个空格:<h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6></li>
</ol>
<p>效果如下：</p>
<h1 id="一号标题-1"><a href="#一号标题-1" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题-1"><a href="#二号标题-1" class="headerlink" title="二号标题"></a>二号标题</h2><h6 id="六号标题-1"><a href="#六号标题-1" class="headerlink" title="六号标题"></a>六号标题</h6><hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>Markdown 使用 <code>&gt;</code> 标示引用段落。最好在每行之前添加 <code>&gt;</code> :</p>
<pre><code>&gt; 这
&gt; 是
&gt; 引
&gt; 
&gt; 用
</code></pre><p>效果如下：</p>
<blockquote>
<p>这<br>是<br>引</p>
<p>用</p>
</blockquote>
<p>引用可以嵌套，需要在引用内部再添加一层 <code>&gt;</code>:</p>
<pre><code>&gt; 引用一
&gt;
&gt; &gt; 引用二
&gt;
&gt; 引用一
</code></pre><p>效果如下：</p>
<blockquote>
<p>引用一</p>
<blockquote>
<p>引用二</p>
</blockquote>
<p>引用一</p>
</blockquote>
<p>引用块可以包含其他 Markdown 元素, 包括 headers, lists, code:</p>
<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here&apos;s some example code:
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>效果如下：</p>
<blockquote>
<h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><ol>
<li>第一条</li>
<li>第二条</li>
</ol>
<p>代码段:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></blockquote>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序和无序列表</p>
<p>无序列表以 <code>*</code>，<code>+</code>，<code>-</code> 在行首标示– 以下3种表示是等价的：</p>
<pre><code>*   Red
*   Green
*   Blue

+   Red
+   Green
+   Blue

-   Red
-   Green
-   Blue
</code></pre><p>有序列表由英文句号标示:</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>如果某个列表中包含多个段落，保证每行起始距页边4个空格或一个tab。</p>
<ol>
<li><p>第一段</p>
<p>第二段</p>
</li>
<li><p>第二条</p>
</li>
</ol>
<p>在列表中添加引用， <code>&gt;</code> 符号需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>效果如下：</p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br>inside a list item.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>引用代码块需要在行首添加4个空格或1个tab：</p>
<pre><code>代码块标示如下:

    public static void main(){
        return;
    }
</code></pre><p>效果如下：<br>    public static void main(){<br>        return;<br>    }</p>
<p>代码块会持续到下一个无缩进的行或文章末尾。</p>
<p>在代码块中，<code>&amp;</code>，<code>&lt;</code> 和 <code>&gt;</code> 会自动转换为 HTML 实体，其他普通的 Markdown 语法不会被 Markdown 语法解析。例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;

**strong**
</code></pre><p>效果如下：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;

**strong**
</code></pre><hr>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>由三个或以上的<code>*</code>，<code>-</code>标示水平分割线:</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><hr>
<p>关于Markdown语法内联元素相关内容，请<a href="">点击</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 语法&lt;br&gt;作者：JOHN GRUBER&lt;br&gt;翻译：OOoo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 该文档就是采用 Markdown 语法进行编辑的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;h
    
    </summary>
    
      <category term="100000+" scheme="https://v2say.com/categories/100000/"/>
    
    
      <category term="Markdown GitHub GFM Grammar JOHN GRUBER" scheme="https://v2say.com/tags/Markdown-GitHub-GFM-Grammar-JOHN-GRUBER/"/>
    
  </entry>
  
</feed>
