<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纷享</title>
  <subtitle>分享产生价值</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://v2say.com/"/>
  <updated>2017-05-16T01:57:08.960Z</updated>
  <id>https://v2say.com/</id>
  
  <author>
    <name>OOoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何通过SOCKS代理实现科学上网</title>
    <link href="https://v2say.com/2017/05/12/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87SOCKS%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E8%B0%B7%E6%AD%8C/"/>
    <id>https://v2say.com/2017/05/12/如何通过SOCKS代理访问谷歌/</id>
    <published>2017-05-12T08:09:01.000Z</published>
    <updated>2017-05-16T01:57:08.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度一下如何使用谷歌（二）"><a href="#百度一下如何使用谷歌（二）" class="headerlink" title="百度一下如何使用谷歌（二）"></a>百度一下如何使用谷歌（二）</h1><p>@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>上一篇我们介绍了如何通过修改<code>Hosts</code>文件从而科学上网。由于Hosts中配置的IP经常被封从而导致无法正常访问谷歌，频繁更新Hosts文件也比较麻烦。</p>
<p>这一篇我们将介绍另外一种方法，即「SOCKS5代理」。SOCKS代理首先需要建立一条 SSH 隧道，然后将浏览器的请求全部由该隧道进行转发和接收。</p>
<p>开始之前你需要准备以下软件：<br><strong>一台墙外主机</strong> ：<br>国外的云主机提供商<strong>Vultr</strong>、<strong>Linode</strong>、<strong>DigitalOcean</strong>等都可以作为选择。<br><strong>SSH工具</strong> ：<br>Windows下有<strong>Xshell</strong>、<strong>putty</strong>等，Mac 终端默认带有SSH功能<br><strong>Chrome</strong> ：<br>谷歌浏览器，谷歌浏览器，可以配置<strong>SOCKS</strong>代理切换上网方式<br><a id="more"></a></p>
<h2 id="注册主机"><a href="#注册主机" class="headerlink" title="注册主机"></a>注册主机</h2><p>国外的云主机厂商很多，如果仅仅用来科学上网再顺便搭建一个博客写写日记什么的，我们需要的主机配置并不需要太高。以价格为主要参考因素的话除了<strong>Vultr</strong>有每月<strong>2.5$</strong>的，其他厂商最便宜的配置都是<strong>5$</strong>。Vultr 的注册地址为<a href="http://www.vultr.com/?ref=7023652" target="_blank" rel="external">Vultr.com</a></p>
<h2 id="登录并部署主机"><a href="#登录并部署主机" class="headerlink" title="登录并部署主机"></a>登录并部署主机</h2><p>因为我用的是Vultr的主机，所以这里以Vultr主机为例。初次注册并登录之后，会要求先设置付款方式。支持的付款方式包括信用卡、PayPal和Bitcoin。绑定付款方式后就可以点击右上角的<code>+</code>按钮部署一台主机，如下图所示<img src="/20170512/host.png" alt="添加Vultr主机"></p>
<p>接下来根据自己的需求选择主机位置，操作系统，系统配置，最后选择<strong>Deploy Now</strong>。等待主机运行起来之后，我们需要找到该主机的IP以及登录的用户名和密码。位置如下图所示：<img src="/20170512/hostconfig.png" alt="保存Vultr主机IP及用户名密码"></p>
<h2 id="安装Xshell或者Putty"><a href="#安装Xshell或者Putty" class="headerlink" title="安装Xshell或者Putty"></a>安装Xshell或者Putty</h2><p>选择任意一个工具安装即可，这里以Xshell为例。安装完成后点击<strong>文件</strong>-<strong>新建</strong>，在弹窗中按照以下步骤填写信息。</p>
<ol>
<li>点击连接，在主机栏填写主机的IP地址。如下图所示：<br><img src="/20170512/xshellhost.png" alt="Xshell 填写主机IP地址"></li>
<li>点击用户身份验证，填写刚刚注册的主机的用户名和密码。如下图所示：<br><img src="/20170512/xshellpassword.png" alt="Xshell 填写主机用户名密码"></li>
<li>点击<strong>SSH</strong>-<strong>隧道</strong>-<strong>添加</strong>，然后<strong>类型（方向）</strong>选择Dynamic（SOCKS4/5），并填写监听端口，端口范围最好用四位数字。如下图所示：<br><img src="/20170512/socks.png" alt="Xshell 选择SOCKS隧道"></li>
<li>点击确定之后会自动登录我们注册的主机，这时我们需要检查一下代理隧道是否建立成功，当我们看到状态为打开，则表示成功。如下图所示：<br><img src="/20170512/tunnel.png" alt="Xshell 查看SOCKS隧道是否建立成功"></li>
</ol>
<h2 id="设置Chrome并访问谷歌"><a href="#设置Chrome并访问谷歌" class="headerlink" title="设置Chrome并访问谷歌"></a>设置Chrome并访问谷歌</h2><p>Chrome支持通过SOCKS代理的方式进行网页浏览，但是默认并没有开启。我们需要做的就是在Chrome启动的时候添加代理参数即可。以我本地桌面的Chrome快捷方式为例，右键点击快捷方式图标，选择属性，然后在<strong>目标</strong>栏最后添加启动参数 <code>--proxy-server=socks5://127.0.0.1:1688</code>。参数的作用是将Chrome的所有请求都转到本地建立的<strong>SOCKS5</strong>隧道代理。设置方式如下图所示：<br><img src="/20170512/chromelink.png" alt="Xshell 查看SOCKS隧道是否建立成功"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们可以通过Chrome自由的访问任何网站，包括「<code>http://t66y.com/</code>」, 没有任何限制( •̅_•̅ )。相比较上一篇的修改<strong>Hosts</strong>文件的方式，此方法是不会被GFW封的。因为通过SOCKS5协议，GFW不知道你在做什么(●’◡’●)。</p>
<p>但是此种方式很大的一个弊端就是所有的请求都是通过代理进行的。如果你选择了一个美国的主机，那你如果访问国内的网站，需要先请求代理主机，代理主机请求国内的目标主机，然后再返回给我们。不过我们可以双开嘛，一个浏览器用代理访问国外网站，另外一个不用代理就OK啦 ʅ(‾◡◝)。</p>
<p><strong>预告：</strong>下一篇，我们将介绍更为智能的一种方式，即PAC代理模式。此种模式可以自定义规则从而实现自动切换国内外网站的访问方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;百度一下如何使用谷歌（二）&quot;&gt;&lt;a href=&quot;#百度一下如何使用谷歌（二）&quot; class=&quot;headerlink&quot; title=&quot;百度一下如何使用谷歌（二）&quot;&gt;&lt;/a&gt;百度一下如何使用谷歌（二）&lt;/h1&gt;&lt;p&gt;@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;上一篇我们介绍了如何通过修改&lt;code&gt;Hosts&lt;/code&gt;文件从而科学上网。由于Hosts中配置的IP经常被封从而导致无法正常访问谷歌，频繁更新Hosts文件也比较麻烦。&lt;/p&gt;
&lt;p&gt;这一篇我们将介绍另外一种方法，即「SOCKS5代理」。SOCKS代理首先需要建立一条 SSH 隧道，然后将浏览器的请求全部由该隧道进行转发和接收。&lt;/p&gt;
&lt;p&gt;开始之前你需要准备以下软件：&lt;br&gt;&lt;strong&gt;一台墙外主机&lt;/strong&gt; ：&lt;br&gt;国外的云主机提供商&lt;strong&gt;Vultr&lt;/strong&gt;、&lt;strong&gt;Linode&lt;/strong&gt;、&lt;strong&gt;DigitalOcean&lt;/strong&gt;等都可以作为选择。&lt;br&gt;&lt;strong&gt;SSH工具&lt;/strong&gt; ：&lt;br&gt;Windows下有&lt;strong&gt;Xshell&lt;/strong&gt;、&lt;strong&gt;putty&lt;/strong&gt;等，Mac 终端默认带有SSH功能&lt;br&gt;&lt;strong&gt;Chrome&lt;/strong&gt; ：&lt;br&gt;谷歌浏览器，谷歌浏览器，可以配置&lt;strong&gt;SOCKS&lt;/strong&gt;代理切换上网方式&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://v2say.com/categories/tools/"/>
    
    
      <category term="翻墙" scheme="https://v2say.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="最简单的方法使用Google" scheme="https://v2say.com/tags/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8Google/"/>
    
      <category term="如何通过SOCKS代理实现科学上网" scheme="https://v2say.com/tags/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87SOCKS%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="图文教程教你如何翻墙" scheme="https://v2say.com/tags/%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BF%BB%E5%A2%99/"/>
    
      <category term="10分钟的简易翻墙教程" scheme="https://v2say.com/tags/10%E5%88%86%E9%92%9F%E7%9A%84%E7%AE%80%E6%98%93%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2017最新Hosts</title>
    <link href="https://v2say.com/2017/05/07/2017%E6%9C%80%E6%96%B0Hosts/"/>
    <id>https://v2say.com/2017/05/07/2017最新Hosts/</id>
    <published>2017-05-07T13:09:01.000Z</published>
    <updated>2017-05-16T01:52:30.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度一下如何使用谷歌（一）"><a href="#百度一下如何使用谷歌（一）" class="headerlink" title="百度一下如何使用谷歌（一）"></a>百度一下如何使用谷歌（一）</h1><p>@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]</p>
<p>什么时候百度沦为我们检测网络是否联通的工具？什么时候我们可以以最快的方式搜索得到我们想要的结果？什么时候百度可以去掉搜索结果前面的莆田系广告？答案就是：当你开始使用谷歌的时候。</p>
<p>那如何能够快速使用谷歌呢？这里将介绍几个常用的方法供参考：</p>
<ol>
<li>修改Hosts文件</li>
<li>使用<code>SwitchyOmega</code>等浏览器插件配置</li>
<li>配置VPN</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="修改Hosts文件原理"><a href="#修改Hosts文件原理" class="headerlink" title="修改Hosts文件原理"></a>修改Hosts文件原理</h2><p>为了方便用户记忆，我们将每个IP对应一个域名，从而可以通过域名访问网站。所以当我们在使用域名访问网站的时候，就需要知道每个域名对应哪个IP，这就用到了DNS (Domain Name Server) ，它的作用就是进行 IP 解析，把域名对应到 IP。</p>
<p>那Hosts文件的作用是什么呢？它里面保存的就是域名和IP的对应关系。每一行保存一个IP地址和一个域名，这样当我们在使用浏览器访问对应域名的时候就相当于直接访问我们设置好的IP地址。</p>
<h3 id="Hosts文件的位置"><a href="#Hosts文件的位置" class="headerlink" title="Hosts文件的位置"></a>Hosts文件的位置</h3><table>
<thead>
<tr>
<th style="text-align:left">操作系统</th>
<th style="text-align:center">Hosts文件位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Windows</td>
<td style="text-align:center"><code>%SystemRoot%\System32\drivers\etc\hosts</code></td>
</tr>
<tr>
<td style="text-align:left">Mac</td>
<td style="text-align:center"><code>/etc/hosts</code></td>
</tr>
</tbody>
</table>
<h3 id="如何获取最新的Hosts配置"><a href="#如何获取最新的Hosts配置" class="headerlink" title="如何获取最新的Hosts配置"></a>如何获取最新的Hosts配置</h3><p>由于城墙防御的升级，我们配置Hosts所使用的IP地址过一段时间就有可能被发现，从而被封锁，所以我们需要不断更新Hosts配置以逃避封锁。</p>
<p>如何获取最新的Hosts配置，请访问：</p>
<ul>
<li><a href="https://v2say.com/hosts.txt">2017年4月份最新Hosts配置</a></li>
<li><a href="https://v2say.com/hosts.txt">2017年5月份最新Hosts配置</a></li>
</ul>
<h3 id="该方法的优势和劣势"><a href="#该方法的优势和劣势" class="headerlink" title="该方法的优势和劣势"></a>该方法的优势和劣势</h3><p>作为最简单粗暴的跨越长城的姿势，修改Hosts方法为大多数懒癌患者所喜爱。只需要拿到最新的Hosts配置，并复制到我们操作系统的Hosts文件中保存即可。</p>
<p><strong>注意：</strong>为了保证我们配置的Hosts立即生效，我们还需要做以下几个操作，以Windows 为例：</p>
<ol>
<li>通过<code>win</code> + <code>R</code>,打开<code>运行</code>,输入<code>cmd</code></li>
<li>输入命令<code>ipconfig /flushdns</code></li>
<li>重启浏览器访问<a href="https://www.google.com.hk" target="_blank" rel="external">谷歌</a></li>
</ol>
<p>下一篇我们将介绍如何通过浏览器插件<code>SwitchyOmega</code>优雅翻越长城。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;百度一下如何使用谷歌（一）&quot;&gt;&lt;a href=&quot;#百度一下如何使用谷歌（一）&quot; class=&quot;headerlink&quot; title=&quot;百度一下如何使用谷歌（一）&quot;&gt;&lt;/a&gt;百度一下如何使用谷歌（一）&lt;/h1&gt;&lt;p&gt;@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]&lt;/p&gt;
&lt;p&gt;什么时候百度沦为我们检测网络是否联通的工具？什么时候我们可以以最快的方式搜索得到我们想要的结果？什么时候百度可以去掉搜索结果前面的莆田系广告？答案就是：当你开始使用谷歌的时候。&lt;/p&gt;
&lt;p&gt;那如何能够快速使用谷歌呢？这里将介绍几个常用的方法供参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改Hosts文件&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;SwitchyOmega&lt;/code&gt;等浏览器插件配置&lt;/li&gt;
&lt;li&gt;配置VPN&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="tools" scheme="https://v2say.com/categories/tools/"/>
    
    
      <category term="2017最新Hosts" scheme="https://v2say.com/tags/2017%E6%9C%80%E6%96%B0Hosts/"/>
    
      <category term="翻墙" scheme="https://v2say.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="最简单的方法使用Google" scheme="https://v2say.com/tags/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8Google/"/>
    
  </entry>
  
  <entry>
    <title>获取微信公众号所有历史文章(续)</title>
    <link href="https://v2say.com/2017/05/02/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>https://v2say.com/2017/05/02/如何获取微信公众号所有历史文章（续）/</id>
    <published>2017-05-02T02:12:30.000Z</published>
    <updated>2017-05-02T02:14:10.945Z</updated>
    
    <content type="html"><![CDATA[<p>@(微信公众号小技巧)[微信公众号|所有历史文章]</p>
<p><strong>上一篇</strong>我们介绍了如何通过<strong>Fiddler</strong> 和 <strong>Chrome</strong> 得到知名大V所有历史文章的接口。那拿到接口之后该怎么办呢？你需要一个程序员，嗯！(ง •̀_•́)ง</p>
<blockquote>
<p><strong>郑重声明：</strong><br>该方法获取微信公众号历史文章仅供参考，请勿恶意使用。另外说明一下，微信本身&gt; 对于抓取数据的接口已经做了限制，如果频繁使用该接口进行数据抓取，微信会暂时&gt; 禁止当前微信号获取所有公众号的历史文章。目测当前的禁止时间为5分钟。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="接口简化"><a href="#接口简化" class="headerlink" title="接口简化"></a>接口简化</h2><p><strong>上一篇</strong>最后我们通过Chrome已经看到获取文章列表的URL<code>https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=MzI0MjA1Mjg2Ng==&amp;f=json&amp;frommsgid=1000000134XXXXX</code>, URL 太长，后面的大串字符我以<code>XXXXX</code>代替。格式化之后如下图所示</p>
</blockquote>
<p>为了简化接口，我们把没必要的参数删除，最后发现只有这几个参数是必须的</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">参数值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">action</td>
<td style="text-align:left">getmsg</td>
<td style="text-align:left">这个URL的目的是干嘛的？获取message（消息）的</td>
</tr>
<tr>
<td style="text-align:left">__biz</td>
<td style="text-align:left">MzI0MjA1Mjg2Ng==</td>
<td style="text-align:left">这个参数与微信公众号一一对应，每个公众号都不一样</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">json</td>
<td style="text-align:left">获取数据的格式是JSON</td>
</tr>
<tr>
<td style="text-align:left">frommsgid</td>
<td style="text-align:left">1000000134</td>
<td style="text-align:left">公众号文章的ID，该接口返回从该ID开始的10篇文章</td>
</tr>
</tbody>
</table>
<p>公众号历史文章以时间顺序排列，离当前时间最近的文章排在最前面，因此我们可以得到以下规律第一篇文章的ID为1000000142，后续应该是<strong>1000000141，1000000140… …1000000133</strong>，总共10个ID。在获取文章列表后，以最后一篇文章的ID作为拼接下一个URL的<strong>frommsgid</strong>，其他参数不变。这样就可以循环获取所有的历史文章了。</p>
<h2 id="自动化获取"><a href="#自动化获取" class="headerlink" title="自动化获取"></a>自动化获取</h2><p>我们知道了获取历史文章的规律后，接下来就是怎么通过程序来实现自动获取并输出内容。<br>URL <code>https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=MzI0MjA1Mjg2Ng==&amp;f=json&amp;frommsgid=1000000134</code> 是真实的可用的地址，在我的浏览器中执行的结果如下，其中参数已经通过红色框标注。</p>
<p>那你把这个URL拷贝到自己的浏览器中可用看到同样的结果吗？不出意外的话是不可以的。原因就是因为这个接口的正常使用是有条件的，那就是必须获得鉴权。那如何使得浏览器获得跟<strong>微信客户端</strong>同样的权利，然后再使用该接口呢？</p>
<p>这个就不用麻烦大家自己去测试接口了。经过测试发现在<strong>Fiddler</strong>最开始的响应中有两个Cookie的写入操作，如下图所示</p>
<p>我们将这两个Cookie写入浏览器，就可以通过以上简单的URL获取公众号历史文章了。另外如果想通过程序自动获取，那只需要在请求的时候带上这两个Cookie内容，并不断修改<strong>frommsgid</strong>就可以获取公众号所有的历史文章了。</p>
<p><code>最后再次说明一下，频繁请求会被禁止访问所有公众号的历史文章</code> ⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@(微信公众号小技巧)[微信公众号|所有历史文章]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上一篇&lt;/strong&gt;我们介绍了如何通过&lt;strong&gt;Fiddler&lt;/strong&gt; 和 &lt;strong&gt;Chrome&lt;/strong&gt; 得到知名大V所有历史文章的接口。那拿到接口之后该怎么办呢？你需要一个程序员，嗯！(ง •̀_•́)ง&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;郑重声明：&lt;/strong&gt;&lt;br&gt;该方法获取微信公众号历史文章仅供参考，请勿恶意使用。另外说明一下，微信本身&amp;gt; 对于抓取数据的接口已经做了限制，如果频繁使用该接口进行数据抓取，微信会暂时&amp;gt; 禁止当前微信号获取所有公众号的历史文章。目测当前的禁止时间为5分钟。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="tools" scheme="https://v2say.com/categories/tools/"/>
    
    
      <category term="微信公众号历史文章" scheme="https://v2say.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/"/>
    
      <category term="所有历史文章" scheme="https://v2say.com/tags/%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/"/>
    
      <category term="caoz的梦呓" scheme="https://v2say.com/tags/caoz%E7%9A%84%E6%A2%A6%E5%91%93/"/>
    
      <category term="小道消息" scheme="https://v2say.com/tags/%E5%B0%8F%E9%81%93%E6%B6%88%E6%81%AF/"/>
    
      <category term="微信公众号" scheme="https://v2say.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>获取微信公众号所有历史文章</title>
    <link href="https://v2say.com/2017/04/25/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/"/>
    <id>https://v2say.com/2017/04/25/如何获取公众号所有历史文章/</id>
    <published>2017-04-25T05:12:30.000Z</published>
    <updated>2017-04-29T06:06:48.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何获取公众号所有历史文章"><a href="#如何获取公众号所有历史文章" class="headerlink" title="如何获取公众号所有历史文章"></a>如何获取公众号所有历史文章</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>微信公众号历史文章的查看大家都会，公众号里有历史文章可以翻阅。但要想看一年前的历史文章怎么办，一页一页翻？有人说历史文章可以搜索，那如果不记得文章内容或关键字怎么办。</p>
<p>那一天你正在查看某知名大V（譬如 caoz）的历史文章，看的津津有味，这个时候女朋友的微信来了，你说是回还是不回。回完微信，再次翻阅历史或者搜索又是一阵忙碌，内心很是崩溃。这里分享一个方法教大家如何获取微信公众号的所有历史文章，你需要准备以下几个软件：</p>
<p><strong>Fiddler</strong> ：HTTP 代理工具，可以帮我们找到公众号历史文章的链接地址<br><strong>chrome</strong> ：谷歌浏览器，可以帮我们查找微信公众号历史文章的链接规律<br><strong>微信 Windows 版</strong> ：为了方便操作，当然手机微信也可以，将手机代理改为 Fiddler 即可</p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>安装 Fiddler 并将 Fiddler 设置为电脑全局代理。打开Fiddler，点击工具栏菜单Tools–&gt;Telerik Fiddler Options–&gt;Connections。设置代理端口并勾选作为系统代理选项<br><a id="more"></a></p>
<p>##访问公众号历史文章<br>通过 Windows 版微信访问公众号历史文章，以caoz的公众号（caoz的梦呓）为例。点击公众号历史文章按钮，查看 Fiddler 窗口中所展示的所有链接，右键点击蓝色链接（如下图）并拷贝该URL，在 Chrome 中打开链接，此时可以看到我们在浏览器中可以查看公众号的所有历史文章。</p>
<p>##获取公众号历史文章接口<br>在 Chrome 浏览器打开历史文章列表后，按F12打开 Chrome 的开发工具。如图所示选中XHR,在下拉公众号历史文章列表的过程中，我们可以看到有左边的链接和右边的结果。此时的结果是JSON字符串，由此我们可以断定这就是微信公众号历史文章的接口及结果集。</p>
<p><strong>注意</strong><br><code>图文版详情请关注下图公众号查看</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何获取公众号所有历史文章&quot;&gt;&lt;a href=&quot;#如何获取公众号所有历史文章&quot; class=&quot;headerlink&quot; title=&quot;如何获取公众号所有历史文章&quot;&gt;&lt;/a&gt;如何获取公众号所有历史文章&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;微信公众号历史文章的查看大家都会，公众号里有历史文章可以翻阅。但要想看一年前的历史文章怎么办，一页一页翻？有人说历史文章可以搜索，那如果不记得文章内容或关键字怎么办。&lt;/p&gt;
&lt;p&gt;那一天你正在查看某知名大V（譬如 caoz）的历史文章，看的津津有味，这个时候女朋友的微信来了，你说是回还是不回。回完微信，再次翻阅历史或者搜索又是一阵忙碌，内心很是崩溃。这里分享一个方法教大家如何获取微信公众号的所有历史文章，你需要准备以下几个软件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fiddler&lt;/strong&gt; ：HTTP 代理工具，可以帮我们找到公众号历史文章的链接地址&lt;br&gt;&lt;strong&gt;chrome&lt;/strong&gt; ：谷歌浏览器，可以帮我们查找微信公众号历史文章的链接规律&lt;br&gt;&lt;strong&gt;微信 Windows 版&lt;/strong&gt; ：为了方便操作，当然手机微信也可以，将手机代理改为 Fiddler 即可&lt;/p&gt;
&lt;h2 id=&quot;设置代理&quot;&gt;&lt;a href=&quot;#设置代理&quot; class=&quot;headerlink&quot; title=&quot;设置代理&quot;&gt;&lt;/a&gt;设置代理&lt;/h2&gt;&lt;p&gt;安装 Fiddler 并将 Fiddler 设置为电脑全局代理。打开Fiddler，点击工具栏菜单Tools–&amp;gt;Telerik Fiddler Options–&amp;gt;Connections。设置代理端口并勾选作为系统代理选项&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://v2say.com/categories/tools/"/>
    
    
      <category term="微信公众号历史文章" scheme="https://v2say.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/"/>
    
      <category term="所有历史文章" scheme="https://v2say.com/tags/%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/"/>
    
      <category term="caoz的梦呓" scheme="https://v2say.com/tags/caoz%E7%9A%84%E6%A2%A6%E5%91%93/"/>
    
      <category term="小道消息" scheme="https://v2say.com/tags/%E5%B0%8F%E9%81%93%E6%B6%88%E6%81%AF/"/>
    
      <category term="微信公众号" scheme="https://v2say.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 官方教程内联（Inline）语法（二）</title>
    <link href="https://v2say.com/2017/04/01/Markdown%20%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E5%86%85%E8%81%94%EF%BC%88Inline%EF%BC%89%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://v2say.com/2017/04/01/Markdown 官方教程内联（Inline）语法（二）/</id>
    <published>2017-04-01T02:50:13.000Z</published>
    <updated>2017-05-16T11:11:37.104Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>内联元素指的是与行内元素，与块状元素相对应。主要包括链接，代码，强调，图片等元素。块状元素的 Markdown 语法可以参考<a href="https://v2say.com/2017/03/20/Markdown 官方教程块级（Block）语法（一）/">上一篇</a></p>
<hr>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种风格的链接: <strong>行内链接</strong> 和 <strong>引用链接</strong>。</p>
<p>两种风格的链接均用中括号扩起来 [ ]。<br><a id="more"></a><br>行内链接由两部分组成，方括号<code>[ ]</code>括起来的链接描述，以及紧跟方括号的链接地址，地址由括弧<code>( )</code>包围。括弧内可以选择为该链接添加标题。例如：</p>
<pre><code>   This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>如果想要链接到当前服务器的页面，链接地址可以是相对地址：</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p>引用类型的链接采用两对方括号进行表示，其中第一个方括号内容为链接的描述信息，第二个内容为链接的ID：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>然后，你需要做的是在文档的任何位置，定义 ID 所对应的链接：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>规则说明：</p>
<ul>
<li>ID 由方括号包围 ，距离左边距不超过 3 个空格</li>
<li>一个冒号</li>
<li>一个或多个空格</li>
<li>链接地址</li>
<li>链接标题—可以由单引号，双引号或者括号包围起来</li>
</ul>
<p>以下三种表达方式是等价的：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>注意：</strong> 链接名称可以由字母，数字，空格等组成，但是链接是大小写不敏感的，即链接大小写是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p>是一样的。</p>
<p>关于链接也可以简写如下：</p>
<pre><code>[Google][]
</code></pre><p>然后链接的定义如下：</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>下面是一个使用的示范：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

[1]: http://google.com/        &quot;Google&quot;
[2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
[3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>简写的方式如下：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>为了对比写法上的区别，将行内链接的写法也贴出来：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>由此可以看出来，引用链接的方式看起来更加利于编写和阅读。</p>
<hr>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用 (<code>*</code>) 和 (<code>_</code>) 来标记强调的字符。单个 <code>*</code> 或 <code>_</code> 最终被转化为<br>HTML <code>&lt;em&gt;</code> 标签；两个 <code>*</code> 或 <code>_</code>最终被转化为 HTML<br><code>&lt;strong&gt;</code> 标签：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>将会转化为：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p><strong>注意：</strong> <code>*</code> 和 <code>_</code> 两侧不能有空格，否则会被当作单独字符处理。如果想要单独输出以上两个字符，则需要在字符前加 <code>\</code> 做转义。</p>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我们可以使用两个 (<code>` </code>) 来包围表示一段代码：</p>
<pre><code>Use the `printf()` function.
</code></pre><p>将会转化为：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>在代码块中使用 `，必需在代码块起始和末尾加入多个`：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>在代码块内部，符合和尖括号会被自动转义为 HTML 实体：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>会被转化为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><hr>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 中的图片语法与链接类似，也分为行内图片和引用两种。</p>
<p>行内图片语法如下：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>规则如下：</p>
<ul>
<li>语法说明字符<code>!</code>开头</li>
<li>一对方括号，包含图片的 <code>alt</code> 属性</li>
<li>一对括弧包含图片的地址，还可选择性的加上图片的标题 <code>title</code> </li>
</ul>
<p>引用型的图片语法如下：</p>
<pre><code>![Alt text][id]
</code></pre><p><code>id</code> 是图片的引用地址，其定义的语法与链接完全一致：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>该表示方法没有设置图片大小的语法，如果想要设置，则可以直接食用 HTML <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><hr>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持为 URL 和 email 自动生成链接。你需要做的就是用尖括号把地址括起来：</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown 会将上面的句子转化为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>email的自动链接与 URL 基本一致，不同的地方在于为了防止 email 地址被 spambots 处理，故进行了转义：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>会被 Markdown 解析为：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>在浏览器中可以被转化为可以点击的 email 地址 “address@example.com”</p>
<hr>
<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 语法可以使用反斜线 <code>\</code> 来表示字符本身。如果想要在文字中展示 <code>*</code> ，则需要在 <code>*</code> 前加上反斜线：</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown 支持用反斜线的字符：</p>
<pre><code>\   反斜线
`   点号
*   星号
_   下划线
{}  大括号
[]  方括号
()  小括弧
#   井号
+    加号
-    减号
.   英文句号
!   感叹号
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;内联元素&quot;&gt;&lt;a href=&quot;#内联元素&quot; class=&quot;headerlink&quot; title=&quot;内联元素&quot;&gt;&lt;/a&gt;内联元素&lt;/h2&gt;&lt;p&gt;内联元素指的是与行内元素，与块状元素相对应。主要包括链接，代码，强调，图片等元素。块状元素的 Markdown 语法可以参考&lt;a href=&quot;https://v2say.com/2017/03/20/Markdown 官方教程块级（Block）语法（一）/&quot;&gt;上一篇&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;Markdown 支持两种风格的链接: &lt;strong&gt;行内链接&lt;/strong&gt; 和 &lt;strong&gt;引用链接&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;两种风格的链接均用中括号扩起来 [ ]。&lt;br&gt;
    
    </summary>
    
      <category term="popular" scheme="https://v2say.com/categories/popular/"/>
    
    
      <category term="Markdown Grammar" scheme="https://v2say.com/tags/Markdown-Grammar/"/>
    
      <category term="JOHN GRUBER" scheme="https://v2say.com/tags/JOHN-GRUBER/"/>
    
      <category term="Markdown语法" scheme="https://v2say.com/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
      <category term="10分钟学会Markdown" scheme="https://v2say.com/tags/10%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AMarkdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 官方教程块级（Block）语法（一）</title>
    <link href="https://v2say.com/2017/03/20/Markdown%20%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E5%9D%97%E7%BA%A7%EF%BC%88Block%EF%BC%89%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://v2say.com/2017/03/20/Markdown 官方教程块级（Block）语法（一）/</id>
    <published>2017-03-20T05:12:30.000Z</published>
    <updated>2017-05-16T11:10:59.078Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 语法<br>参考：JOHN GRUBER「Markdown 语法作者」<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">个人网站</a></p>
<p><strong>注:</strong> 该文档就是采用 Markdown 语法进行编辑的。</p>
<hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 标记语言产生的意义就是让文本编辑能够更容易的读和写。</p>
<p>Markdown 注重可读性。可发布的 Markdown 标记的文档应该是纯文本，不应该包含用来格式化的标记。Markdown 语法由标点符号标记，标点符号的选择尽量展示其最原始的含义。例如用<code>*</code>强调，<code>&gt;</code>表示引用等等。</p>
<p>Markdown 并不是 HTML 的替代品，它仅仅支持 HTML 的部分标签。HTML 是<strong>发布</strong>格式，Markdown 是<strong>书写</strong>格式。如果想要使用HTML中的其他标签，可以直接在Markdown文档中使用。</p>
<p>Markdown语法对块级别的HTML元素有使用限制，例如 <code>&lt;div&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;pre&gt;</code>，<code>&lt;p&gt;</code>等等。在使用的时候必须在块的头和尾加入空行，并且头和尾标记不能有缩进。</p>
<a id="more"></a>
<p>例如在Markdown文档中添加HTML表格语法如下:</p>
<pre><code>上一段落

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;table content&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

下一段落
</code></pre><p><strong>注意:</strong> Markdown语法在上述块内不起作用，例如在HTML块中使用<strong>强调</strong>不起作用。</p>
<p>内联级别的 HTML 标签，例如 <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code> 或者 <code>&lt;del&gt;</code> 可以在任何地方使用。和块级 HTML 标签不一样的地方就是，Markdown 语法<strong>会解析</strong>内联级别内的内容。</p>
<hr>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在 HTML 中，<code>&lt;</code> 和 <code>&amp;</code> 需要特殊处理。<code>&lt;</code> 标示标签的开始，<code>&amp;</code> 标示HTML实体。如果要使用，必须采用 <code>&amp;lt;</code>和<code>&amp;amp;</code>来标示&lt;和&amp;。这个是比较麻烦的一点，例如要写“AT&amp;T”，在 Markdown 文档中必须写作 <code>AT&amp;amp;T</code>。甚至在文档中插入 URL，也需要转义，例如：</p>
<pre><code>https://v2say.com/popular?page=1&amp;num=10
</code></pre><p>必须写作：</p>
<pre><code>https://v2say.com/popular?page=1&amp;amp;num=10
</code></pre><p>需要记住以上必须转义的地方，例如 <code>&amp;copy</code> 即 &copy; 标示版权的标记就不需要转义。</p>
<hr>
<h2 id="区块标记"><a href="#区块标记" class="headerlink" title="区块标记"></a>区块标记</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一段话由一行或多行文本组成，并由一个或多个空行「仅包含tab 或 空格」隔开。如果想要另起一段，则在句末添加两个或多个空格，然后再回车。</p>
<hr>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题标示法：</p>
<p>标题下方用等号或者短横标示，例如：<br>    大标题<br>   =<br>    小标题<br>    -</p>
<p><code>=</code> 和 <code>-</code> 的数量不限</p>
<p>用 <code>#</code> 在标题头部标示， <code>#</code> 后保留一个空格:</p>
<pre><code># 一号标题
## 二号标题
###### 六号标题
</code></pre><hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>Markdown 使用 <code>&gt;</code> 标示引用段落。最好在每行之前添加 <code>&gt;</code> :</p>
<pre><code>&gt; 这
&gt; 是
&gt; 引
&gt; 
&gt; 用
</code></pre><p>效果如下：</p>
<blockquote>
<p>这<br>是<br>引</p>
<p>用</p>
</blockquote>
<p>引用可以嵌套，需要在引用内部再添加一层 <code>&gt;</code>:</p>
<pre><code>&gt; 引用一
&gt;
&gt; &gt; 引用二
&gt;
&gt; 引用一
</code></pre><p>效果如下：</p>
<blockquote>
<p>引用一</p>
<blockquote>
<p>引用二</p>
</blockquote>
<p>引用一</p>
</blockquote>
<p>引用块可以包含其他 Markdown 元素, 包括 headers, lists, code:</p>
<pre><code>&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here&apos;s some example code:
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>效果如下：</p>
<blockquote>
<ol>
<li>第一条</li>
<li>第二条</li>
</ol>
<p>代码段:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></blockquote>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序和无序列表</p>
<p>无序列表以 <code>*</code>，<code>+</code>，<code>-</code> 在行首标示– 以下3种表示是等价的：</p>
<pre><code>*   Red
*   Green
*   Blue

+   Red
+   Green
+   Blue

-   Red
-   Green
-   Blue
</code></pre><p>有序列表由英文句号标示:</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>如果某个列表中包含多个段落，保证每行起始距页边4个空格或一个tab。</p>
<pre><code>1.  第一段

    第二段

2.  第二条
</code></pre><p>在列表中添加引用， <code>&gt;</code> 符号需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>效果如下：</p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br>inside a list item.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>引用代码块需要在行首添加4个空格或1个tab：</p>
<pre><code>代码块标示如下:

    public static void main(){
        return;
    }
</code></pre><p>效果如下：</p>
<pre><code>public static void main(){
    return;
}
</code></pre><p>代码块会持续到下一个无缩进的行或文章末尾。</p>
<p>在代码块中，<code>&amp;</code>，<code>&lt;</code> 和 <code>&gt;</code> 会自动转换为 HTML 实体，其他普通的 Markdown 语法不会被 Markdown 语法解析。例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;

**strong**
</code></pre><p>转化后如下：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre><hr>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>由三个或以上的<code>*</code>，<code>-</code>标示水平分割线:</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 语法&lt;br&gt;参考：JOHN GRUBER「Markdown 语法作者」&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;个人网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 该文档就是采用 Markdown 语法进行编辑的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Markdown 标记语言产生的意义就是让文本编辑能够更容易的读和写。&lt;/p&gt;
&lt;p&gt;Markdown 注重可读性。可发布的 Markdown 标记的文档应该是纯文本，不应该包含用来格式化的标记。Markdown 语法由标点符号标记，标点符号的选择尽量展示其最原始的含义。例如用&lt;code&gt;*&lt;/code&gt;强调，&lt;code&gt;&amp;gt;&lt;/code&gt;表示引用等等。&lt;/p&gt;
&lt;p&gt;Markdown 并不是 HTML 的替代品，它仅仅支持 HTML 的部分标签。HTML 是&lt;strong&gt;发布&lt;/strong&gt;格式，Markdown 是&lt;strong&gt;书写&lt;/strong&gt;格式。如果想要使用HTML中的其他标签，可以直接在Markdown文档中使用。&lt;/p&gt;
&lt;p&gt;Markdown语法对块级别的HTML元素有使用限制，例如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;等等。在使用的时候必须在块的头和尾加入空行，并且头和尾标记不能有缩进。&lt;/p&gt;
    
    </summary>
    
      <category term="popular" scheme="https://v2say.com/categories/popular/"/>
    
    
      <category term="JOHN GRUBER" scheme="https://v2say.com/tags/JOHN-GRUBER/"/>
    
      <category term="Markdown" scheme="https://v2say.com/tags/Markdown/"/>
    
      <category term="GitHub GFM Grammar" scheme="https://v2say.com/tags/GitHub-GFM-Grammar/"/>
    
  </entry>
  
</feed>
