<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V2Say</title>
  <subtitle>U see U say</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://v2say.com/"/>
  <updated>2017-03-30T12:32:31.050Z</updated>
  <id>https://v2say.com/</id>
  
  <author>
    <name>Floor23</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://v2say.com/2017/03/30/Markdown%20Tutorial%20Inline%20Syntax/"/>
    <id>https://v2say.com/2017/03/30/Markdown Tutorial Inline Syntax/</id>
    <published>2017-03-30T12:32:31.012Z</published>
    <updated>2017-03-30T12:32:31.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>
<p>In both styles, the link text is delimited by [square brackets].</p>
<p>To create an inline link, use a set of regular parentheses immediately<br>after the link text’s closing square bracket. Inside the parentheses,<br>put the URL where you want the link to point, along with an <em>optional</em><br>title for the link, surrounded in quotes. For example:</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>Will produce:</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre><p>If you’re referring to a local resource on the same server, you can<br>use relative paths:</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p>Reference-style links use a second set of square brackets, inside<br>which you place a label of your choosing to identify the link:</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>You can optionally use a space to separate the sets of brackets:</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre><p>Then, anywhere in the document, you define your link label like this,<br>on a line by itself:</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>That is:</p>
<ul>
<li>Square brackets containing the link identifier (optionally<br>indented from the left margin using up to three spaces);</li>
<li>followed by a colon;</li>
<li>followed by one or more spaces (or tabs);</li>
<li>followed by the URL for the link;</li>
<li>optionally followed by a title attribute for the link, enclosed<br>in double or single quotes, or enclosed in parentheses.</li>
</ul>
<p>The following three link definitions are equivalent:</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>Note:</strong> There is a known bug in Markdown.pl 1.0.1 which prevents<br>single quotes from being used to delimit link titles.</p>
<p>The link URL may, optionally, be surrounded by angle brackets:</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre><p>You can put the title attribute on the next line and use extra spaces<br>or tabs for padding, which tends to look better with longer URLs:</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
</code></pre><p>Link definitions are only used for creating links during Markdown<br>processing, and are stripped from your document in the HTML output.</p>
<p>Link definition names may consist of letters, numbers, spaces, and<br>punctuation – but they are <em>not</em> case sensitive. E.g. these two<br>links:</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p>are equivalent.</p>
<p>The <em>implicit link name</em> shortcut allows you to omit the name of the<br>link, in which case the link text itself is used as the name.<br>Just use an empty set of square brackets – e.g., to link the word<br>“Google” to the google.com web site, you could simply write:</p>
<pre><code>[Google][]
</code></pre><p>And then define the link:</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>Because link names may contain spaces, this shortcut even works for<br>multiple words in the link text:</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre><p>And then define the link:</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre><p>Link definitions can be placed anywhere in your Markdown document. I<br>tend to put them immediately after each paragraph in which they’re<br>used, but if you want, you can put them all at the end of your<br>document, sort of like footnotes.</p>
<p>Here’s an example of reference links in action:</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>Using the implicit link name shortcut, you could instead write:</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>Both of the above examples will produce the following HTML output:</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre><p>For comparison, here is the same paragraph written using<br>Markdown’s inline link style:</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>The point of reference-style links is not that they’re easier to<br>write. The point is that with reference-style links, your document<br>source is vastly more readable. Compare the above examples: using<br>reference-style links, the paragraph itself is only 81 characters<br>long; with inline-style links, it’s 176 characters; and as raw HTML,<br>it’s 234 characters. In the raw HTML, there’s more markup than there<br>is text.</p>
<p>With Markdown’s reference-style links, a source document much more<br>closely resembles the final output, as rendered in a browser. By<br>allowing you to move the markup-related metadata out of the paragraph,<br>you can add links without interrupting the narrative flow of your<br>prose.</p>
<h3 id="em">Emphasis</h3>

<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of<br>emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an<br>HTML <code>&lt;em&gt;</code> tag; double <code>*</code>‘s or <code>_</code>‘s will be wrapped with an HTML<br><code>&lt;strong&gt;</code> tag. E.g., this input:</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>will produce:</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p>You can use whichever style you prefer; the lone restriction is that<br>the same character must be used to open and close an emphasis span.</p>
<p>Emphasis can be used in the middle of a word:</p>
<pre><code>un*frigging*believable
</code></pre><p>But if you surround an <code>*</code> or <code>_</code> with spaces, it’ll be treated as a<br>literal asterisk or underscore.</p>
<p>To produce a literal asterisk or underscore at a position where it<br>would otherwise be used as an emphasis delimiter, you can backslash<br>escape it:</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre><h3 id="code">Code</h3>

<p>To indicate a span of code, wrap it with backtick quotes (<code>` </code>).<br>Unlike a pre-formatted code block, a code span indicates code within a<br>normal paragraph. For example:</p>
<pre><code>Use the `printf()` function.
</code></pre><p>will produce:</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>To include a literal backtick character within a code span, you can use<br>multiple backticks as the opening and closing delimiters:</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>which will produce this:</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>The backtick delimiters surrounding a code span may include spaces –<br>one after the opening, one before the closing. This allows you to place<br>literal backtick characters at the beginning or end of a code span:</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>will produce:</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>With a code span, ampersands and angle brackets are encoded as HTML<br>entities automatically, which makes it easy to include example HTML<br>tags. Markdown will turn this:</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>into:</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>You can write this:</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>to produce:</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre><h3 id="img">Images</h3>

<p>Admittedly, it’s fairly difficult to devise a “natural” syntax for<br>placing images into a plain text document format.</p>
<p>Markdown uses an image syntax that is intended to resemble the syntax<br>for links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>
<p>Inline image syntax looks like this:</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>That is:</p>
<ul>
<li>An exclamation mark: <code>!</code>;</li>
<li>followed by a set of square brackets, containing the <code>alt</code><br>attribute text for the image;</li>
<li>followed by a set of parentheses, containing the URL or path to<br>the image, and an optional <code>title</code> attribute enclosed in double<br>or single quotes.</li>
</ul>
<p>Reference-style image syntax looks like this:</p>
<pre><code>![Alt text][id]
</code></pre><p>Where “id” is the name of a defined image reference. Image references<br>are defined using syntax identical to link references:</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>As of this writing, Markdown has no syntax for specifying the<br>dimensions of an image; if this is important to you, you can simply<br>use regular HTML <code>&lt;img&gt;</code> tags.</p>
<hr>
<h2 id="misc">Miscellaneous</h2>

<h3 id="autolink">Automatic Links</h3>

<p>Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown will turn this into:</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>Automatic links for email addresses work similarly, except that<br>Markdown will also perform a bit of randomized decimal and hex<br>entity-encoding to help obscure your address from address-harvesting<br>spambots. For example, Markdown will turn this:</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>into something like this:</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>which will render in a browser as a clickable link to “address@example.com”.</p>
<p>(This sort of entity-encoding trick will indeed fool many, if not<br>most, address-harvesting bots, but it definitely won’t fool all of<br>them. It’s better than nothing, but an address published in this way<br>will probably eventually start receiving spam.)</p>
<h3 id="backslash">Backslash Escapes</h3>

<p>Markdown allows you to use backslash escapes to generate literal<br>characters which would otherwise have special meaning in Markdown’s<br>formatting syntax. For example, if you wanted to surround a word<br>with literal asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can use<br>backslashes before the asterisks, like this:</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown provides backslash escapes for the following characters:</p>
<pre><code>\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+    plus sign
-    minus sign (hyphen)
.   dot
!   exclamation mark
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内联元素&quot;&gt;&lt;a href=&quot;#内联元素&quot; class=&quot;headerlink&quot; title=&quot;内联元素&quot;&gt;&lt;/a&gt;内联元素&lt;/h2&gt;&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h
    
    </summary>
    
    
  </entry>
  
</feed>
