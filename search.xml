<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[DOS 命令小结]]></title>
      <url>/2018/01/09/DOS-%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="DOS命令简介"><a href="#DOS命令简介" class="headerlink" title="DOS命令简介"></a>DOS命令简介</h1><p>Dos命令可以在不借助其他编程语言和环境的情况下完成很多自动化的任务，今天刚好有个Windows服务器下的脚本需要定时调用，因此就学了一下基本的命令并在此记录，以备后用。</p>
<h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>echo 用来显示执行的命令或执行命令的结果「注：在bat脚本中两个冒号标示注释」</p>
<pre><code>bash
::打开echo回显，执行Dos命令之后不仅会显示命令本身，还会显示命令执行结果
echo on
::关闭echo回显，执行Dos命令之后不会显示命令本身，仅显示命令执行结果
echo off
::输出变量「DIR」到文件log.txt中,每次写入文件会覆盖之前的记录
echo %DIR%  &gt; log.txt
::输出变量「DIR」到文件log.txt中,每次写入文件会追加到log.txt文件末尾
echo %DIR%  &gt;&gt; log.txt
</code></pre><h2 id="文件及文件夹路径相关"><a href="#文件及文件夹路径相关" class="headerlink" title="文件及文件夹路径相关"></a>文件及文件夹路径相关</h2><p>Dos命令中可以直接使用内置变量来获取当前路径及文件的相关信息(<strong>注：</strong>下述命令中「I」为变量占位符，其中「0」代表执行文件本身，「1」代表「#1」，「2」代表「#2」…)</p>
<pre><code>bash
%~I         - 移除变量两边的引号 (&quot;)，例如「%~0」表示当前文件的全路径
%~fI        - 全路径
%~dI        - 仅包含驱动器路径
%~pI        - 仅包含路径
%~nI        - 仅包含文件名称
</code></pre><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>在Dos命令中，两个「%」包围起来的是我们定义的变量，如果变量是个字符串，我们可以在两个「%」中对该字符进行截断</p>
<pre><code>bash
%date%  -代表date字符串
%date:~2%  -标示date字符串由第二个字符开始往后所有字符
%date:~-2%  -标示date字符串由倒数第二个字符开始往前所有字符
%date:~2,5%  -标示date字符串由第二个字符开始往后5个字符
</code></pre><h2 id="FOR语法"><a href="#FOR语法" class="headerlink" title="FOR语法"></a>FOR语法</h2><p>FOR 语法中可以带多个参数其中「/R」表示递归查找， 「%%i」其中i为占位符，可以是任何<strong>单个</strong>字母，表示循环变量。in 后面的括号中可以利用正则匹配文件名称，如「*.txt」表示任何以「.txt」结尾的文件。</p>
<pre><code>bash
for /R %DIR% %%i in (*start.bat) do (
echo &quot;%%i&quot;  &gt;&gt; start.log
)
</code></pre><p>以上例子会将「DIR」路径下所有以start.bat结尾的文件输出到start.log中</p>
<h2 id="Call和Start"><a href="#Call和Start" class="headerlink" title="Call和Start"></a>Call和Start</h2><p>Call会调用命令或其他批处理，会等待调用的命令执行完毕然后再继续当前操作<br>Start会另外启动一个新的窗口来运行其他命令或批处理。也就是说Start命令会另起一个「线程」完成指定的任务。</p>
<p>此次使用DOS命令目的是定时执行我们服务器上一个目录下的所有脚本，以上是使用到的命令及相关介绍，配合Windows自身的「任务计划程序」，简单实用，非常好用。</p>
]]></content>
      
        <categories>
            
            <category> TECH </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOS </tag>
            
            <tag> bat </tag>
            
            <tag> cmd </tag>
            
            <tag> 遍历文件夹，调用批处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信支付接入注意事项]]></title>
      <url>/2017/12/14/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="微信支付接入注意事项"><a href="#微信支付接入注意事项" class="headerlink" title="微信支付接入注意事项"></a>微信支付接入注意事项</h1><p>微信支付截止目前为止支持5种场景的接入，每一种场景需要特定的开发工作，列举如下：</p>
<ol>
<li>公众号支付，适用于在公众号、朋友圈、聊天窗口等微信内完成支付的场景。</li>
<li>APP支付，适用于在移动端APP中集成微信支付功能的场景。</li>
<li>扫码支付，适用于PC网站支付、实体店单品等场景。</li>
<li>刷卡支付，适用于线下面对面收银的场景，如超市、便利店等。</li>
<li>H5支付，适用于具有H5网页版商城，通过移动端网页调起微信客户端进行支付的场景。</li>
<li>微信买单，无需开发。</li>
</ol>
<h2 id="公众号支付"><a href="#公众号支付" class="headerlink" title="公众号支付"></a>公众号支付</h2><p>需要商户已有H5网站，在微信客户端内发起支付流程。</p>
<h3 id="公众号内配置"><a href="#公众号内配置" class="headerlink" title="公众号内配置"></a>公众号内配置</h3><p>公众号支付需要在H5页面通过JS接口发起微信支付申请，因此需要在公众号内设置JS接口安全域名。只有在设置的域名或路径下才有权限调用微信开放的JS接口。设置目录为：公众平台–&gt;设置–&gt;公众号设置–&gt;功能设置。<br>JS接口安全域名设置注意事项：</p>
<ol>
<li>最多可以添加3个域名或路径（建议写域名，这样域名下任何路径的H5页面均可以在微信中使用JS开放接口）</li>
<li>域名必须通过ICP备案</li>
<li>下载验证文件并放至服务器根目录，确保通过域名可以访问。例如域名设置为「m.jxedt.com」，则文件要放置的路径为「m.jxedt.com/MP_verify_XXX.txt」</li>
<li>最重要的一点，<strong>安全域名一个月仅能修改3次</strong>，确认好业务域名或路径后，尽量把三个域名全部利用起来。</li>
</ol>
<p><img src="../20171214/safe_domain.png" alt="安全域名设置"></p>
<h3 id="微信支付商户平台配置"><a href="#微信支付商户平台配置" class="headerlink" title="微信支付商户平台配置"></a>微信支付商户平台配置</h3><h4 id="支付授权目录配置"><a href="#支付授权目录配置" class="headerlink" title="支付授权目录配置"></a>支付授权目录配置</h4><p>公众号支付在请求支付的时候会校验请求来源是否有在商户平台做了配置，所以必须确保支付目录已经正确的被配置，否则将验证失败，请求支付不成功。<br>支付授权目录的配置路径：商户平台–&gt;产品中心–&gt;开发配置–&gt;支付配置</p>
<p><img src="../20171214/pay_jsapi.png" alt="支付授权目录配置"></p>
<h4 id="API证书下载及密钥设置"><a href="#API证书下载及密钥设置" class="headerlink" title="API证书下载及密钥设置"></a>API证书下载及密钥设置</h4><p>部分安全性要求较高的API需要使用API证书来确认调用者的身份，公众号支付中退款接口需要证书。</p>
<p>API密钥的作用：</p>
<blockquote>
<p>在API调用时用来按照指定规则对你的请求参数进行签名，服务器收到你的请求时会进行签名验证，既可以界定你的身份也可以防止其他人恶意篡改请求数据。部分API单独使用API密钥签名进行安全加固，部分安全性要求更高的API会要求使用API密钥签名和API证书同时进行安全加固。</p>
</blockquote>
<p>证书下载及密钥设置路径：商户平台–&gt;账户中心–&gt;账户安全–&gt;API安全<br><img src="../20171214/pay_cert.png" alt="API证书下载及密钥设置"></p>
<h3 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h3><p><img src="../20171214/pay_flow.png" alt="微信支付流程图"></p>
<h3 id="支付业务时序图"><a href="#支付业务时序图" class="headerlink" title="支付业务时序图"></a>支付业务时序图</h3><p><img src="../20171214/wechat_pay_timeline.png" alt="时序图"></p>
<h3 id="Server开发注意事项"><a href="#Server开发注意事项" class="headerlink" title="Server开发注意事项"></a>Server开发注意事项</h3><ul>
<li>微信有两套JS接口可以调起支付（JS-SDK和WeixinJSBridge），所有参数确保与对应的接口保持一致，包括大小写</li>
<li>统一订单生成时所使用的签名算法，与返回给H5页面的预支付信息中的<strong>签名算法必须保持一致</strong>。为确保不出现莫名签名失败问题，最好统一使用MD5.</li>
<li>支付回调接口，需做幂等处理，防止多次回调引起业务逻辑问题。</li>
<li><strong>订单查询功能</strong>可以查看当前订单的状态，进而处理下一步业务逻辑<ul>
<li>当商户后台、网络、服务器等出现异常，商户系统最终未接收到支付通知；</li>
<li>调用支付接口后，返回系统错误或未知交易状态情况；</li>
<li>调用刷卡支付API，返回USERPAYING的状态；</li>
<li>调用关单或撤销接口API之前，需确认支付状态；</li>
</ul>
</li>
<li><strong>订单关闭功能</strong>使用场景（<strong>订单生成后5分钟内不能关单</strong>）<ul>
<li>商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付</li>
<li>系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号支付 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之冒泡排序及其优化]]></title>
      <url>/2017/10/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>冒泡排序是最笨的排序算法，得名于它的排序过程，即（以升序排序为例）：给定一个数组，比较相邻数值，若左侧数大于右侧，则交换两者；假定有N个数，则一趟排序需要比较N-1次，然后最大的数值在一轮比较之后被交换至最右侧。类似气泡往上冒一样，最大的数值依次往右边移动，故称为冒泡排序。</p>
<a id="more"></a>
<h1 id="冒泡排序特点"><a href="#冒泡排序特点" class="headerlink" title="冒泡排序特点"></a>冒泡排序特点</h1><p>冒泡排序最差的时间复杂度为O(n<sup>2</sup>),最好为O(n)，属于稳定排序，空间复杂度为O(1)。</p>
<h1 id="原始冒泡排序"><a href="#原始冒泡排序" class="headerlink" title="原始冒泡排序"></a>原始冒泡排序</h1><p>按照冒泡的基本思路实现的代码（Go版本）如下：</p>
<pre><code>func MainFunc (args []int) {
    swapTimes := len(args) - 1
    exchange, compare := 0,0
    for swapTimes &gt; 0 {
        bound := swapTimes
        for i := 0; i &lt; bound; i++ {
            compare++
            if args[i] &gt; args[i + 1] {
                exchange++
                args[i], args[i + 1] = args[i + 1], args[i]
            }
        }
        swapTimes--
    }
    fmt.Println(&quot;compare:&quot;, compare, &quot;exchange: &quot; , exchange)
    fmt.Println(args)
}
</code></pre><h1 id="优化冒泡排序"><a href="#优化冒泡排序" class="headerlink" title="优化冒泡排序"></a>优化冒泡排序</h1><p>对于基本有序的数组进行排序，其实可以做一下优化。当某次比较过程中发现并没有数据交换，那则表明该段数据已经有序，仅需记录该段数据的起始下标，对下标之前的数据进行排序即可，代码（Go版本）如下：</p>
<pre><code>func MainFuncQuickEnd(args []int) {
    flag := len(args) - 1
    exchange, compare := 0,0
    for flag &gt; 0 {
        limit := flag
        preExchange := exchange
        for i := 0; i &lt; limit; i++ {
            compare++
            if args[i] &gt; args[i + 1] {
                exchange++
                flag = i
                args[i], args[i + 1] = args[i + 1], args[i]
            }
        }
        if preExchange == exchange {
            break
        }
    }
    fmt.Println(&quot;compare:&quot;, compare, &quot;exchange: &quot; , exchange)
    fmt.Println(args)
}
</code></pre><h1 id="优化前后对比"><a href="#优化前后对比" class="headerlink" title="优化前后对比"></a>优化前后对比</h1><p>对于基本有序的数组，如{2,1,5,4,0,6,7,8,9}，进行排序，优化前需要比较36次，交换6次；优化后需要比较14次，交换6次。对于完全乱序的数组，两者差别并不是很大。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 冒泡排序 </tag>
            
            <tag> go语言 </tag>
            
            <tag> golang 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么 wait(),notify(),notifyAll() 的调用必须在 synchronized 代码中]]></title>
      <url>/2017/09/30/%E4%B8%BA%E4%BB%80%E4%B9%88%20wait(),notify(),notifyAll()%20%E7%9A%84%E8%B0%83%E7%94%A8%E5%BF%85%E9%A1%BB%E5%9C%A8%20synchronized%20%E4%BB%A3%E7%A0%81%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>Java中，任何对象都拥有一个Monitor的概念，这个Monitor拥有单独的一个锁，并拥有一个入队列和一个等待队列。没有被synchronized修饰的方法或语句，可以在任何时间被任何线程调用。而被synchronized修饰的方法同一时间仅能被一个拥有该对象锁的线程调用。当一个线程在调用synchronized方法时，另外的线程调用该方法时就被阻塞，并放入队列中。</p>
<p>多线程开发中，wait(),notify(),notifyAll()方法必须在synchronized方法或代码块中，否则会抛出运行时异常：<code>java.lang.IllegalMonitorStateException: current thread not owner</code>。因为要想调用这些方法，必须要保证调用方法的线程已经获取了该对象的锁。</p>
<a id="more"></a>
<h1 id="wait-方法会释放所持有的锁"><a href="#wait-方法会释放所持有的锁" class="headerlink" title="wait() 方法会释放所持有的锁"></a>wait() 方法会释放所持有的锁</h1><p>当一个线程在调用wait()方法时，该线程会释放当前所持有的锁，并进入等待队列。因此要想执行该方法，前提是必须拥有这个锁，而synchronized可以保证在执行wait()时，已经拿到了锁。</p>
<h1 id="什么情况下我们才会使用wait"><a href="#什么情况下我们才会使用wait" class="headerlink" title="什么情况下我们才会使用wait()"></a>什么情况下我们才会使用wait()</h1><p>在等待队列中的线程只会被notify()、notifyAll()唤醒并执行。</p>
<p>一般情况下，我们在调用wait()时，肯定会加上一个限定条件。也就是说在达到某个条件之后，我们才会让当前线程wait()。而notify()、notifyAll()也是在达到某个条件之后，我们才会去唤醒其他的等待线程。而这个条件就是线程间进行通信的一个互斥条件。</p>
<h1 id="生产者消费者模式解读"><a href="#生产者消费者模式解读" class="headerlink" title="生产者消费者模式解读"></a>生产者消费者模式解读</h1><p>以生产者消费者模式为例，消费者从缓存中取数据，生产者向缓存中写数据。消费者必须等生产者写入数据后才能取数据，生产者必须等消费者把数据取走之后才能向缓存中写数据。如果wait(),notify(),notifyAll()可以被任意方法调用，当消费者在读数据的时候，发现缓存为空，这时调用了wait()方法，而此时生产者也调用了notify()，告诉消费者有数据到达，这样消费者就永远接收不到这个通知，然后一直等下去。</p>
<p>因此，我们必须在synchronized方法中调用wait(),notify(),notifyAll()，从而互斥地拥有锁，从而保证不会丢失通知。</p>
<p>参考文章:<a href="http://www.xyzws.com/Javafaq/why-wait-notify-notifyall-must-be-called-inside-a-synchronized-method-block/127" target="_blank" rel="external">Why wait(), notify(), notifyAll() must be called inside a synchronized method/block?</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> Java小知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信支付签名问题汇总]]></title>
      <url>/2017/08/31/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%AD%BE%E5%90%8D%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>开发微信支付功能，遇到一些很难被发现的坑，在此记录，以防后患。</p>
<h1 id="公众号支付的场景"><a href="#公众号支付的场景" class="headerlink" title="公众号支付的场景"></a>公众号支付的场景</h1><p>商户已有H5商品页面，用户可以通过点击商城的购买链接或是扫二维码在微信客户端打开网页，从而进行支付。</p>
<a id="more"></a>
<h1 id="微信支付商户平台设置"><a href="#微信支付商户平台设置" class="headerlink" title="微信支付商户平台设置"></a>微信支付商户平台设置</h1><h2 id="支付授权目录配置"><a href="#支付授权目录配置" class="headerlink" title="支付授权目录配置"></a>支付授权目录配置</h2><p>登录<a href="https://pay.weixin.qq.com" target="_blank" rel="external">微信支付商户平台</a>，进入目录<strong>产品中心-开发配置-支付配置</strong>，在支付授权目录添加支付页面的目录。即：若支付页面为<code>https://domain.com/pay/pay.html</code>，则需要将<code>https://domain.com/pay/</code>添加到<strong>JSAPI支付授权目录</strong>下。</p>
<h2 id="支付API证书及密钥配置"><a href="#支付API证书及密钥配置" class="headerlink" title="支付API证书及密钥配置"></a>支付API证书及密钥配置</h2><p>部分API（如退款）的调用需要通过证书来确定调用者的身份，不涉及则可以不用设置。</p>
<p>如需配置，则需下载证书并放置到服务器安全目录，在调用相关接口时读取证书并使用，使用方法参考<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=11_1" target="_blank" rel="external">微信支付DEMO</a>。</p>
<h1 id="微信公众号设置"><a href="#微信公众号设置" class="headerlink" title="微信公众号设置"></a>微信公众号设置</h1><p>在H5页面进行支付时需要获取用户基本信息，因此还需在公众平台账户设置网页授权域名。登录微信公众号，<strong>公众号设置-功能设置-网页授权域名</strong>，添加测试或正式环境的域名；下载验证文件（类似MP<em>verify</em><em>.txt）并放置到服务器目录下。<em>*注意：该域名一个月内仅可修改3次，因此千万不要随便设置，以免影响开发</em></em></p>
<h1 id="支付流程及参数"><a href="#支付流程及参数" class="headerlink" title="支付流程及参数"></a>支付流程及参数</h1><p>公众号支付大部分流程在服务器端进行，H5页面仅需发起下单请求和支付请求就可以了。服务端请求统一下单API，成功调用后由返回的参数中获取预支付ID<strong>prepay_id</strong>，并生成支付参数返回给H5。参数格式参照<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="external">公众号支付参数说明</a>。<strong>注意：所有接口的参数都是大小写敏感的，因此最好拷贝各个参数而不是手动敲代码</strong></p>
<p>支付的流程如下：</p>
<p><img src="/20170930/wechat.pay.flowchart.png" alt="微信支付流程图"></p>
<p>隐藏的坑：</p>
<ol>
<li><p>若签名失败，则在<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=20_1" target="_blank" rel="external">签名校验地址</a>校验调用相关API的参数生成的签名是否正确</p>
</li>
<li><p>统一下单的接口中需要签名，返回给H5的支付参数中也有签名，<strong>两个签名的签名方式必须统一</strong>。</p>
</li>
</ol>
<ul>
<li><p>JS支付接口<code>getBrandWCPayRequest</code>仅支持MD5签名，所以统一下单接口必须使用MD5进行签名。</p>
</li>
<li><p>若使用JSAPI中的接口<code>WeixinJSBridge</code>进行支付，则默认为SHA1，而新版的微信支付使用的是MD5。因此综上所述，建议<strong>所有签名用MD5</strong></p>
</li>
</ul>
<p>第二个坑摸索了一天一夜，最终还是通过发邮件给微信的人才搞定。通过签名接口校验所有的签名都是校验通过，但是调起支付后还是通知签名失败，建议他们修改文档，然而没有卵用，依然没有任何提示。就这样吧，踩坑愉快！</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号支付 </tag>
            
            <tag> 微信支付 </tag>
            
            <tag> 签名 </tag>
            
            <tag> 支付签名校验失败 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[影响谷歌排名的200个关键因素：完整版（62-79）]]></title>
      <url>/2017/06/18/%E5%BD%B1%E5%93%8D%E8%B0%B7%E6%AD%8C%E6%8E%92%E5%90%8D%E7%9A%84200%E4%B8%AA%E5%85%B3%E9%94%AE%E5%9B%A0%E7%B4%A0%EF%BC%9A%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%8862-79%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>网站的整体布局，网站的内容完整性，安全性等等各个因素也会影响谷歌的排名，下面我们就列举出几个网站级的因素供大家参考。</p>
<ol>
<li>提供独一无二的价值和内容<br>谷歌会找出那些并不提供有用信息的网站，尤其是简单的联盟网站</li>
<li>「关于我们」页面<br>谷歌会更喜欢那些提供联系信息的网站，如果你的「关于我们」信息与WHOIS信息匹配的话更好<a id="more"></a></li>
<li>域名的信任和排名<br>由高可信网站链接的网站授信程度更高，这是一个极其重要的因素。关于信任排名，你可以看看<a href="http://backlinko.com/google-trustrank" target="_blank" rel="external">这篇文章</a></li>
<li>网站架构<br>良好的网站架构能够帮助谷歌更好的组织你的网站内容</li>
<li>网站更新<br>网站的更新频率，尤其是网站新内容是什么时候更新的，这是谷歌衡量一个网站新鲜程度的重要因素</li>
<li>页面的数量<br>页面的数量能够暗示网站的权威性，至少有一点可以说明，如果有大量的页面同时也会区分简单的联盟网站</li>
<li>提供网站地图<br>网站地图能帮搜索引擎更方便和完整的索引你的网站，提高网站的可见性</li>
<li>网站的运行时间<br>服务器的下线时间过长会降低网站的排名</li>
<li>服务器的位置<br>服务器的位置会影响网站在不同地区的排名，尤其会影响位置相关的搜索</li>
<li>SSL证书<br>谷歌将HTTPS作为网站排名的一个因素</li>
<li>「服务条款和隐私」页面<br>这个页面会让谷歌认为网站是值得信任的</li>
<li>重复的Meta标签<br>重复的Meta标签会降低页面的可见性</li>
<li>面包屑导航<br>面包屑导航是一个用户友好的结构，他可以帮助用户知道当前所处的位置</li>
<li>手机端优化<br>针对手机端进行优化，或者创建一个响应式的网站对谷歌排名有很大帮助。你甚至可以创建<a href="http://googlewebmastercentral.blogspot.com/2014/11/helping-users-find-mobile-friendly-pages.html" target="_blank" rel="external">移动端友好</a>的标签，针对移动端进行优化</li>
<li>YouTube<br>搜索结果中的YouTube视频会对网站排名有帮助</li>
<li>网站可用性<br>网站的易用性很差会导致网站排名下降，会降低页面浏览，跳出率增加。谷歌会利用大数据及相应算法来计算这个因素</li>
<li>「谷歌分析工具」和「谷歌站长工具」的使用<br>部分人认为在网站上安装这两个程序就会帮助网站建立索引，这两个工具会直接帮助谷歌进行数据的搜集。</li>
<li>用户的评论和网站的声誉<br>在评分网站（例如Yelp.com 和 RipOffReport.com）的排名很重要，会影响谷歌的算法。</li>
</ol>
<p>下一篇，我们将继续关注影响谷歌排名的200个因素中有关「反向链接」的48个因素。</p>
<p>原文标题：Google’s 200 Ranking Factors: The Complete List<br>原文链接：<code>http://backlinko.com/google-ranking-factors</code><br>原文作者：Brian Dean<br>翻译：woods</p>
]]></content>
      
        <categories>
            
            <category> SEO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 谷歌SEO </tag>
            
            <tag> 影响排名的200个因素 </tag>
            
            <tag> 影响谷歌排名的站点因素 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[影响谷歌排名的200个关键因素：完整版（11-61）]]></title>
      <url>/2017/06/03/%E5%BD%B1%E5%93%8D%E8%B0%B7%E6%AD%8C%E6%8E%92%E5%90%8D%E7%9A%84200%E4%B8%AA%E5%85%B3%E9%94%AE%E5%9B%A0%E7%B4%A0%EF%BC%9A%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%8811-61%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>影响谷歌排名的前十个因素是域名相关的，现在我们进入第二个阶段，来了解一下影响谷歌SEO的第二个重要因素——页面级因素</p>
<h1 id="影响谷歌排名的60个页面级因素"><a href="#影响谷歌排名的60个页面级因素" class="headerlink" title="影响谷歌排名的60个页面级因素"></a>影响谷歌排名的60个页面级因素</h1><ol>
<li>页面的Title标签<br>网页的Title标签是仅次于网页内容的重要因素，因此网页的Title标签会很大程度上影响<a href="www.baidu.com">单页SEO</a></li>
<li>以关键字开头的Title标签<br>根据<a href="http://www.moz.com/learn-seo/title-tag" target="_blank" rel="external">Moz data</a>的数据，以关键字开头的Title标签比以关键字结尾的Title标签排名更好一些</li>
<li>Description标签中的关键字<br>现在已经不是那么重要，但是仍然会有些许作用</li>
<li>H1标签中的关键字<br>H1标签也可以称之为二级Title标签，它给谷歌一个关联性的信号，可以参考这个<a href="http://cbutterworth.com/do-h1-tags-still-help-seo/" target="_blank" rel="external">相关的研究</a>——如下图所示<a id="more"></a></li>
<li>关键字是网页文档中使用最频繁的短语<br>网页中的关键字比其他关联性因素更能影响排名</li>
<li>网页内容的长度<br>网页内容越长，代表内容涵盖越广，比短文章的泛泛而谈更受欢迎。SERPIQ 发现<a href="http://blog.serpiq.com/how-important-is-content-length-why-data-driven-seo-trumps-guru-opinions/" target="_blank" rel="external">内容长短与SERP（Search Engine Results Page）的位置具有相关性</a>：</li>
<li>关键词密度<br>尽管不如之前那么重要，但是关键词密度仍然是谷歌判断一个网页话题的因素，但是如果关键词太过密集会有反作用</li>
<li>内容中的潜在语义关键词（LSI）<br>LSI 关键词能够帮助搜索引擎更好的理解关键词的语义（例如会通过语境区别苹果和苹果公司）。LSI 关键词的更能体现内容的质量</li>
<li>Title 和 Description 标签中的LSI关键词<br>与网页内容类似，标签中的LSI关键词也会帮助谷歌区分同义词，从而起到一定的效果。</li>
<li>网页的加载速度<br>谷歌和必应都将页面的加载速度作为一个排名因素。搜索引擎的爬虫会根据页面的代码和文件大小很准确的预估网站的访问速度</li>
<li>重复内容<br>网站上的重复内容（或者仅做少量修改）会对排名产生负面效果</li>
<li>Rel=Canonical</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://www.domain.com/index.html"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>「规范链接」意在表明网站中哪个页面是权威页面。只能指向站内链接，目的是为了使搜索引擎准确收录，并防止重复内容导致影响排名</p>
<ol>
<li>通过Chrome 访问网页的速度<br>谷歌可能也会通过Chrome来访问网站，并分析网站的服务器速度，CDN的使用情况以及其他非HTML因素</li>
<li>图片优化<br>页面中的图片会给搜索引擎非常重要的信息，包括图片的名称，alt 描述，标题，描述等</li>
<li>内容更新的时间<br>谷歌会在搜索结果页展示特定页面的最近更新时间，并且会在涉及时间的搜索中标注时间</li>
<li>内容更新的幅度<br>内容的编辑和变更也是一个因素，章节的删改肯定比调换字词的顺序影响更大=</li>
<li>更新的频繁程度<br>页面的更新频率是多少，每天，每周还是每年？页面的频率也是影响内容新鲜程度的重要因素</li>
<li>关键词的突出程度<br>关键词包含在文章前100个词中中会有重要的突出作用</li>
<li>H2、H3标签中的关键词<br>H2、H3标签中的关键词也会起到一定的作用</li>
<li>关键词的顺序<br>网页内容中的关键词与搜索的关键词完全匹配肯定比不同顺序关键词的排名要好。一个优化了“如何加入鸵鸟联盟公众号”的页面比优化了“鸵鸟联盟公众号在哪”的页面排名更好。因此关键词的研究真的很重要</li>
<li>出站链接的质量<br>很多SEO专家认为出站链接的质量能够帮助网站提高搜索引擎的信任度</li>
<li>出站链接的主题<br>出站链接的内容会对网页内容产生一定的影响。例如，你的网页是关于汽车的，而出站链接是关于电影的，那么这个关联就会让谷歌认为你的页面是关于汽车电影的而不是真正的汽车</li>
<li>拼写和语法<br>正确的拼写和语法也会展示文章的内容质量</li>
<li>抄袭内容<br>该页面的内容是否原创？如果是抄袭或者采集的内容，那么页面的排名不会比之前的内容排名更好，甚至没有排名</li>
<li>有用的补充内容<br>有用的补充内容会反映出文章的质量，从而影响排名</li>
<li>出站链接的数量<br>太多的出站链接会降低页面的排名</li>
<li>多媒体资源<br>图片、视频还有其他多媒体资源会影响页面的质量</li>
<li>指向页面的内链质量<br>权威性的内链会影响该页面的排名</li>
<li>死链<br>页面中的死链过多，会让谷歌认为这是一个遗弃的网站，并将死链作为影响页面排名的一个重要因素</li>
<li>阅读等级<br>谷歌会评估一个网站的阅读等级，等级区分为3级。那种等级的文章有更好的排名，暂时还不确定。</li>
<li>联盟链接<br>联盟链接本身不会影响网站排名。但是如果联盟链接过多，则会让谷歌重新审查网站，确定网站不是简单的链接网站</li>
<li>内链的数量<br>内链的数量多少表明了该页面相对其他页面的重要性</li>
<li>HTML错误<br>HTML错误和低级的编码错误会让谷歌认为这是一个低质量的网站（有争议）</li>
<li>页面域名的权重<br>一个权威网站的页面排名比一个非权威网站页面的排名要高</li>
<li>页面的PageRank<br>页面的PR值越高，排名越好</li>
<li>URL的长度<br>URL过长会影响排名</li>
<li>URL路径<br>离网站主页越近的网址URL权重越高</li>
<li>人工编辑<br>虽未得到证实，但是人工编辑确实会影响SERP</li>
<li>页面分类<br>页面的分类也会起到一定的影响作用。一个与分类强相关的页面比不相干的页面更容易获得排名提升</li>
<li>WordPress 标签<br>标签是WordPress中一个关联的因素，由标签所关联的页面相关度更强</li>
<li>URL中的关键词<br>这是一个关键的因素</li>
<li>URL中的字符串<br>URL中的分类字符串会让谷歌知道这个页面是关于什么的，提供了什么主题相关的内容</li>
<li>引用以及参考文献<br>引用的内容会影响网页的质量</li>
<li>有序和无序列表<br>列表让搜索引擎更好的理解页面内容，对用户也更友好</li>
<li>网站地图中的页面权重<br>网站地图中页面的优先级会影响页面的排名</li>
<li>太多的出站链接<br>出站链接太多会影响页面的主要内容的展示</li>
<li>页面其他的关键词数量<br>如果页面中还存在其他获得排名的关键词，那么越多越好，谷歌会认为这是一个高质量的页面</li>
<li>页面年龄<br>尽管谷歌更喜欢新的内容，但是老的页面中也会展示新的内容</li>
<li>用户友好的布局<br>友好的布局更能体现页面的内容</li>
<li>闲置的域名<br>2011的谷歌报告中有提过不会展示闲置域名的内容</li>
<li>有用的内容<br>谷歌会区分有用的内容和高质量的内容</li>
</ol>
<p>原文标题：Google’s 200 Ranking Factors: The Complete List<br>原文链接：<code>http://backlinko.com/google-ranking-factors</code><br>原文作者：Brian Dean<br>翻译：woods</p>
]]></content>
      
        <categories>
            
            <category> SEO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 谷歌SEO </tag>
            
            <tag> 影响排名的200个因素 </tag>
            
            <tag> 影响谷歌排名的域名因素 </tag>
            
            <tag> 如何选择网站域名 </tag>
            
            <tag> 如何在域名中加入关键字 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[柴衲家的围墙]]></title>
      <url>/2017/05/26/%E6%9F%B4%E8%A1%B2%E5%AE%B6%E7%9A%84%E5%9B%B4%E5%A2%99/</url>
      <content type="html"><![CDATA[<p>我是鸵鸟柴衲，生活在车迟王国。大家如果来到车迟王国，一定要来我们家里做客。我们家很好认，随便找一个人打听一下，就说「由长城围着的那个鸵鸟的家」就可以了<br><a id="more"></a><br>邻居们给我们家的围墙起了个名字叫「长城」，因为它确实很长、很高，上面还有我们家族的守卫巡逻。自从围墙修好之后，外面的人很难进来，里面的人也很少出去。进出都得需要许可证，而且还要搜身，防止家里有内贼。</p>
<p>围墙里面的世界很繁华，应有尽有。如果你生活在我们家里，衣食住行完全可以在墙内解决。族长掌管着整个家族，族里所有的青壮年都出去干活挣钱，大家统一分配生活用品。族长是一个很正派的人，大家都很敬畏他，因此任何事情都会由族长安排处理，日子过得平静安逸。</p>
<p>平静的生活总是让人感到无趣，前段时间有几个外出打工的青年回来给我们讲了外面的世界，我们听了之后很是激动。他说在墙外面见到过白色的鸵鸟、棕色的鸵鸟甚至黑色的鸵鸟。他们说话也听不大懂，但是可以用手势来相互交流。他们的家族有大有小，有的吃肉，有的吃素，有的自己种吃的，有的给人打工挣钱买吃的，也有到处流浪讨饭的…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">「族长、族长，我们也要出去玩玩...」</div><div class="line">「不行，外面太危险了，你们在家里安全」</div><div class="line">「听他们说外面挺好玩的啊，而且外面的人也都挺好的」</div><div class="line">「知人知面不知心，你怎么知道他们都是好人」</div><div class="line">「族长，我们看看就回来」</div><div class="line">「不行，族里有规定，谁要是与外人私自交往，一律严惩」</div></pre></td></tr></table></figure>
<p>围墙外面的世界很吸引大家，为了能够偷看一眼外面的世界，我们偷偷爬到墙头，看墙角下的过路人，跟他们打招呼，偶尔聊天。他们并没有想象中那么坏，有一些人甚至很同情我们，给我们讲外面的故事，讲他们自己的家庭、爱情还有孩子…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">「跟他们聊天真有意思」</div><div class="line">「你想到围墙外面看看吗」</div><div class="line">「想啊，但是族里有规定」</div><div class="line">「等我长大了，我一定要出去，跟外面的人聊天，做朋友」</div><div class="line">「好，我也是...」</div></pre></td></tr></table></figure>
<p>后来，我被关起来了，因为我说了违反族规的话。我被人举报了。</p>
<p>口述者：鸵鸟柴衲</p>
]]></content>
      
        <categories>
            
            <category> popular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 柴衲 </tag>
            
            <tag> 鸵鸟心态 </tag>
            
            <tag> 翻越围墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[柴衲是一只鸵鸟]]></title>
      <url>/2017/05/25/%E6%9F%B4%E8%A1%B2%E6%98%AF%E4%B8%80%E5%8F%AA%E9%B8%B5%E9%B8%9F/</url>
      <content type="html"><![CDATA[<p>我是鸵鸟柴衲，生活在车迟王国。我有一个幸福美满的家庭，这是一个庞大的家族，除了父母和兄弟姐妹，还有叔叔、阿姨、爷爷、奶奶…</p>
<p>我们家的院子有一堵围墙，墙不高，只是告诉路人不能随便进入。渐渐地，有些人开始不守规矩了，一些胆大的家伙趁我们不注意溜进来偷东西。</p>
<p>我们把之前的围墙建得更高了，防止遭受更大的损失。好景不长，小偷们想了更多方法来对付这堵围墙，有一些会钻洞，有一些会翻墙。与此同时，我们的家族由于勤奋和努力不断壮大，添加了很多新的成员。为了保护家园，族长召开了家族会议，商量如何防止外敌入侵：<br><a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">「把围墙再加固吧」</div><div class="line">「不行，墙再高猴子也会翻进来的」</div><div class="line">「那你说怎么办」</div><div class="line">「派人守着吧，大家轮流看守」</div><div class="line">「看来只能这样了」</div></pre></td></tr></table></figure>
<p>我们把围墙再次加固、加高，并派人巡逻，日夜站岗。我们的生活越来越好，名声也越来越大。邻居们都很羡慕，这让我们家人感到很自豪。慢慢的就有一些穷困的邻居来乞讨了，看着这些可怜虫，我们把自己吃的分给他们一点，用的送他们一点。</p>
<p>穷苦的邻居越来越多，有的甚至跑了好几天就为了过来要一点吃的。家里的食物也不够分了，现在大家才知道，其实我们并没有那么富有。吃的东西给了他们，我们就需要跑的更远，起的更早。但是谁都不说话，因为周围的夸赞声越来越响亮了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">「你们真是我们的活菩萨」</div><div class="line">「给我一口吃的吧，你们又不缺这么一口」</div><div class="line">「算是我们借的吧，等我们有钱了一定还」</div><div class="line">「...」</div></pre></td></tr></table></figure>
<p>家族里也开始有了不一致的声音：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">「咱们都不够吃了，还要分给他们」</div><div class="line">「他们那么可怜，给一点吧」</div><div class="line">「之前一直都给，现在不给了，他们会不会生气啊」</div><div class="line">「大家都省着点吃吧，千万不要让族长知道了」</div><div class="line">「谁敢把这消息泄露给族长，我要他好瞧！」</div><div class="line">「...」</div></pre></td></tr></table></figure>
<p>为了维持生活和邻居们的乞讨，我们每天起的更早，跑的更远。虽然有埋怨，但是嘴上都不说，这就是我的家庭现状。</p>
<p>口述者：鸵鸟柴衲</p>
]]></content>
      
        <categories>
            
            <category> popular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 鸵鸟心态 </tag>
            
            <tag> 长城 </tag>
            
            <tag> 闭关锁国 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[影响谷歌排名的200个关键因素：完整版（1-10）]]></title>
      <url>/2017/05/21/%E5%BD%B1%E5%93%8D%E8%B0%B7%E6%AD%8C%E6%8E%92%E5%90%8D%E7%9A%84200%E4%B8%AA%E5%85%B3%E9%94%AE%E5%9B%A0%E7%B4%A0%EF%BC%9A%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%881-10%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>你应该听过，在谷歌的排名算法中，影响排名结果的因素有大约200个。但是他们都包括哪些，分别代表什么含义？</p>
<p>现在我将这200个因素完整地整理出来，供大家参考和讨论。</p>
<p>这200个因素中，部分是已经被证明了的，部分是有争议的，还有一部分是SEO专家们的猜测。但是我还是将这些因素列出来，大家各抒己见，共同讨论。<br><a id="more"></a></p>
<h1 id="影响谷歌排名的10个与域名相关的因素"><a href="#影响谷歌排名的10个与域名相关的因素" class="headerlink" title="影响谷歌排名的10个与域名相关的因素"></a>影响谷歌排名的10个与域名相关的因素</h1><ol>
<li>域名年龄<blockquote>
<p>一个创建了6个月的域名和创建了1年的域名，他们之间的差异并不是那么的大<br>——Matt Cutts<br>也就是说，谷歌排名确实会考虑这个因素，但是它并不是很重要</p>
</blockquote>
</li>
<li>顶级域名中出现的关键字<br>没有像以前那么效果显著，但域名中包含关键字还是有一定作用的。</li>
<li>域名以关键词开头<br>以关键词开头的域名比域名中没有关键词，或者是关键词在域名中间或末尾更具有排名优势</li>
<li>域名注册时长<br>谷歌的一篇<a href="http://www.searchenginejournal.com/domain-age-how-important-is-it-for-seo/7296/" target="_blank" rel="external">专利</a>提到以下观点：<blockquote>
<p>有价值的域名通常会提前注册多年，而非法的域名则经常不超过一年。因此域名过期的时间将作为预测域名合法性的一个因素</p>
</blockquote>
</li>
<li>子域名中的关键词<br>部分SEO专家说在子域名中的关键词会促进主域名的排名，例如关键词作为子域名的名称（e.g. keyword.domain.com）</li>
<li>域名历史<br>如果一个域名频繁易手（由 whois 查询）则会告诉搜索引擎需要重置这个网站的历史信息，删除之前指向该域名的链接</li>
<li>精确匹配域名（EMD）<br>EMD会给高品质网站的排名带来很大的优势。但是如果EMD指向的是一个低质量的网站，它将起相反作用。<a href="http://searchengineland.com/google-emd-update-research-and-thoughts-137340" target="_blank" rel="external">参考EMD Update</a></li>
<li>whois 应该公开还是隐藏<br>隐藏whois信息即对搜索引擎标示，网站有不想让他人知道的信息。<blockquote>
<p>当我查看whois信息时，他们隐藏了。开启whois隐私保护不是什么坏事，但是当搜索引擎发现网站有其他非正常表现时，再加上whois信息的隐藏动作，会让谷歌任务网站的可信度是不够的<br>–<a href="http://www.searchenginejournal.com/seo-question-do-whois-privacy-services-harm-seo/5874/" target="_blank" rel="external">Matt Cutts at Pubcon 2006</a></p>
</blockquote>
</li>
<li>whois的所有者被搜索引擎惩罚过<br>如果谷歌确定了某人是一个“垃圾”站长，那么它肯定会仔细查看该站长所拥有的所有网站</li>
<li>拥有国家后缀的顶级域名（.e.g .cn .ca .jp）<br>如果域名以国家代码做后缀，那么网站的排名会在相对应的国家有所提高。但是会限制该网站在全球的排名</li>
</ol>
<p>原文标题：Google’s 200 Ranking Factors: The Complete List<br>原文链接：<code>http://backlinko.com/google-ranking-factors</code><br>原文作者：Brian Dean<br>翻译：woods</p>
]]></content>
      
        <categories>
            
            <category> SEO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 谷歌SEO </tag>
            
            <tag> 影响排名的200个因素 </tag>
            
            <tag> 影响谷歌排名的域名因素 </tag>
            
            <tag> 如何选择网站域名 </tag>
            
            <tag> 如何在域名中加入关键字 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[域名注册时间长短对SEO影响有多大]]></title>
      <url>/2017/05/20/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E6%97%B6%E9%97%B4%E9%95%BF%E7%9F%AD%E5%AF%B9SEO%E5%BD%B1%E5%93%8D%E6%9C%89%E5%A4%9A%E5%A4%A7/</url>
      <content type="html"><![CDATA[<h1 id="域名注册时长对SEO到底有多重要？"><a href="#域名注册时长对SEO到底有多重要？" class="headerlink" title="域名注册时长对SEO到底有多重要？"></a>域名注册时长对SEO到底有多重要？</h1><p>一个经常被提及的有关SEO的问题就是：<strong>域名注册的时间</strong>对SEO的影响是否重要。其实可以反过来思考这个问题：</p>
<ul>
<li>一个构建的很好的网站肯定有一个固定的域名，反之，一个注册时间很久的域名肯定也会关联一个建设的很好的网站</li>
<li>发送垃圾信息和邮件的人注册和注销域名特别频繁，也就是说垃圾邮件网站通常会使用新注册的域名</li>
</ul>
<p>通常来讲，谷歌站长们统一认为域名年龄不可能是影响网站排名的一个重要因素，但是观点各异：</p>
<ol>
<li>一点影响都没有</li>
<li>它只是成千上万个因素中的一员，而且是很小的一个（但是仍然算是一个因素）</li>
<li>它很重要</li>
</ol>
<a id="more"></a>
<p><a href="http://www.webmasterworld.com/forum30/28814.htm" target="_blank" rel="external">WebmasterWorld</a> 论坛通过研究谷歌的专利<a href="https://www.google.com/patents/US20050071741?hl=zh-CN" target="_blank" rel="external">Information Retrieval Based on Historical Data</a>，确定谷歌确实会考虑域名的注册和续订时间：</p>
<ol>
<li>网站内容的日期与域名的日期强相关</li>
<li>网站域名的时间可以用来区分合法和非法的域名。<strong>有价值的（合法的）域名通常会提前续费好几年</strong>，而<strong>非法的域名很少会使用超过一年</strong>。因此域名的过期时间将作为一个域名合法性判断的因素，同时也会影响其关联内容的排名。</li>
</ol>
<p>该项谷歌专利也直接（官方版本已经被删除）表示，域名时间因素被很多人<strong>高估和曲解</strong>。我的观点很简单：域名注册的时间长短<strong>并不代表一个网站的内容好坏</strong>，也不代表一个网站是否可靠：</p>
<ul>
<li>一个域名可能被注册后很久都未启用</li>
<li>一个高度成熟的企业会注册和启用新域名（将老域名301-导航到新域名）</li>
<li>一个域名可能非法使用数年之后再次卖给一个“好的”人或公司，但是他的注册时间并没有改变</li>
</ul>
<p>所以对于上述整个争议，我的裁决如下：</p>
<ol>
<li><strong>网站的年龄</strong>（包括外链的年龄）是真正起作用的因素</li>
<li>域名年龄会起<strong>一点点作用</strong>–i.e. 作为搜索引擎判断网站非法或是垃圾站的一个因素</li>
<li>一个旧域名会受到以前旧记录的影响，而且影响会很大。因此，如果你对自己的品牌很在意，那你必须记住，旧域名在你之前已然拥有之前的历史关联，想要在此基础上推广你的品牌，估计比较难</li>
</ol>
<p>结论：域名的注册时间不会降低你的排名，但是也基本上不会起多大积极作用。所以我将精力主要集中在注册一个新的、短的、利基的、让人容易接受的域名，而不会去购买一个旧的之前被人使用过的域名。</p>
<p>原文标题：Domain Age: How Important Is It for SEO?<br>原文链接：<a href="https://www.searchenginejournal.com/domain-age-how-important-is-it-for-seo/7296/" target="_blank" rel="external">https://www.searchenginejournal.com/domain-age-how-important-is-it-for-seo/7296/</a><br>原文作者：Ann Smarty<br>翻译：woods</p>
]]></content>
      
        <categories>
            
            <category> popular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 域名年龄 </tag>
            
            <tag> 谷歌排名 </tag>
            
            <tag> 谷歌SEO </tag>
            
            <tag> Domain Age </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何通过SOCKS代理实现科学上网]]></title>
      <url>/2017/05/12/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87SOCKS%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E8%B0%B7%E6%AD%8C/</url>
      <content type="html"><![CDATA[<h1 id="百度一下如何使用谷歌（二）"><a href="#百度一下如何使用谷歌（二）" class="headerlink" title="百度一下如何使用谷歌（二）"></a>百度一下如何使用谷歌（二）</h1><p>@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>上一篇我们介绍了如何通过修改<code>Hosts</code>文件从而科学上网。由于Hosts中配置的IP经常被封从而导致无法正常访问谷歌，频繁更新Hosts文件也比较麻烦。</p>
<p>这一篇我们将介绍另外一种方法，即「SOCKS5代理」。SOCKS代理首先需要建立一条 SSH 隧道，然后将浏览器的请求全部由该隧道进行转发和接收。</p>
<p>开始之前你需要准备以下软件：<br><strong>一台墙外主机</strong> ：<br>国外的云主机提供商<strong>Vultr</strong>、<strong>Linode</strong>、<strong>DigitalOcean</strong>等都可以作为选择。<br><strong>SSH工具</strong> ：<br>Windows下有<strong>Xshell</strong>、<strong>putty</strong>等，Mac 终端默认带有SSH功能<br><strong>Chrome</strong> ：<br>谷歌浏览器，谷歌浏览器，可以配置<strong>SOCKS</strong>代理切换上网方式<br><a id="more"></a></p>
<h2 id="注册主机"><a href="#注册主机" class="headerlink" title="注册主机"></a>注册主机</h2><p>国外的云主机厂商很多，如果仅仅用来科学上网再顺便搭建一个博客写写日记什么的，我们需要的主机配置并不需要太高。以价格为主要参考因素的话除了<strong>Vultr</strong>有每月<strong>2.5$</strong>的，其他厂商最便宜的配置都是<strong>5$</strong>。Vultr 的注册地址为<a href="http://www.vultr.com/?ref=7023652" target="_blank" rel="external">Vultr.com</a></p>
<h2 id="登录并部署主机"><a href="#登录并部署主机" class="headerlink" title="登录并部署主机"></a>登录并部署主机</h2><p>因为我用的是Vultr的主机，所以这里以Vultr主机为例。初次注册并登录之后，会要求先设置付款方式。支持的付款方式包括信用卡、PayPal和Bitcoin。绑定付款方式后就可以点击右上角的<code>+</code>按钮部署一台主机，如下图所示<img src="/20170512/host.png" alt="添加Vultr主机"></p>
<p>接下来根据自己的需求选择主机位置，操作系统，系统配置，最后选择<strong>Deploy Now</strong>。等待主机运行起来之后，我们需要找到该主机的IP以及登录的用户名和密码。位置如下图所示：<img src="/20170512/hostconfig.png" alt="保存Vultr主机IP及用户名密码"></p>
<h2 id="安装Xshell或者Putty"><a href="#安装Xshell或者Putty" class="headerlink" title="安装Xshell或者Putty"></a>安装Xshell或者Putty</h2><p>选择任意一个工具安装即可，这里以Xshell为例。安装完成后点击<strong>文件</strong>-<strong>新建</strong>，在弹窗中按照以下步骤填写信息。</p>
<ol>
<li>点击连接，在主机栏填写主机的IP地址。如下图所示：<br><img src="/20170512/xshellhost.png" alt="Xshell 填写主机IP地址"></li>
<li>点击用户身份验证，填写刚刚注册的主机的用户名和密码。如下图所示：<br><img src="/20170512/xshellpassword.png" alt="Xshell 填写主机用户名密码"></li>
<li>点击<strong>SSH</strong>-<strong>隧道</strong>-<strong>添加</strong>，然后<strong>类型（方向）</strong>选择Dynamic（SOCKS4/5），并填写监听端口，端口范围最好用四位数字。如下图所示：<br><img src="/20170512/socks.png" alt="Xshell 选择SOCKS隧道"></li>
<li>点击确定之后会自动登录我们注册的主机，这时我们需要检查一下代理隧道是否建立成功，当我们看到状态为打开，则表示成功。如下图所示：<br><img src="/20170512/tunnel.png" alt="Xshell 查看SOCKS隧道是否建立成功"></li>
</ol>
<h2 id="设置Chrome并访问谷歌"><a href="#设置Chrome并访问谷歌" class="headerlink" title="设置Chrome并访问谷歌"></a>设置Chrome并访问谷歌</h2><p>Chrome支持通过SOCKS代理的方式进行网页浏览，但是默认并没有开启。我们需要做的就是在Chrome启动的时候添加代理参数即可。以我本地桌面的Chrome快捷方式为例，右键点击快捷方式图标，选择属性，然后在<strong>目标</strong>栏最后添加启动参数 <code>--proxy-server=socks5://127.0.0.1:1688</code>。参数的作用是将Chrome的所有请求都转到本地建立的<strong>SOCKS5</strong>隧道代理。设置方式如下图所示：<br><img src="/20170512/chromelink.png" alt="Xshell 查看SOCKS隧道是否建立成功"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们可以通过Chrome自由的访问任何网站，包括「<code>http://t66y.com/</code>」, 没有任何限制( •̅_•̅ )。相比较上一篇的修改<strong>Hosts</strong>文件的方式，此方法是不会被GFW封的。因为通过SOCKS5协议，GFW不知道你在做什么(●’◡’●)。</p>
<p>但是此种方式很大的一个弊端就是所有的请求都是通过代理进行的。如果你选择了一个美国的主机，那你如果访问国内的网站，需要先请求代理主机，代理主机请求国内的目标主机，然后再返回给我们。不过我们可以双开嘛，一个浏览器用代理访问国外网站，另外一个不用代理就OK啦 ʅ(‾◡◝)。</p>
<p><strong>预告：</strong>下一篇，我们将介绍更为智能的一种方式，即PAC代理模式。此种模式可以自定义规则从而实现自动切换国内外网站的访问方式。</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> 最简单的方法使用Google </tag>
            
            <tag> 如何通过SOCKS代理实现科学上网 </tag>
            
            <tag> 图文教程教你如何翻墙 </tag>
            
            <tag> 10分钟的简易翻墙教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017最新Hosts]]></title>
      <url>/2017/05/07/2017%E6%9C%80%E6%96%B0Hosts/</url>
      <content type="html"><![CDATA[<h1 id="百度一下如何使用谷歌（一）"><a href="#百度一下如何使用谷歌（一）" class="headerlink" title="百度一下如何使用谷歌（一）"></a>百度一下如何使用谷歌（一）</h1><p>@(我要用谷歌)[手动搭梯子|YouTube|Twitter|Facebook]</p>
<p>什么时候百度沦为我们检测网络是否联通的工具？什么时候我们可以以最快的方式搜索得到我们想要的结果？什么时候百度可以去掉搜索结果前面的莆田系广告？答案就是：当你开始使用谷歌的时候。</p>
<p>那如何能够快速使用谷歌呢？这里将介绍几个常用的方法供参考：</p>
<ol>
<li>修改Hosts文件</li>
<li>使用<code>SwitchyOmega</code>等浏览器插件配置</li>
<li>配置VPN</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="修改Hosts文件原理"><a href="#修改Hosts文件原理" class="headerlink" title="修改Hosts文件原理"></a>修改Hosts文件原理</h2><p>为了方便用户记忆，我们将每个IP对应一个域名，从而可以通过域名访问网站。所以当我们在使用域名访问网站的时候，就需要知道每个域名对应哪个IP，这就用到了DNS (Domain Name Server) ，它的作用就是进行 IP 解析，把域名对应到 IP。</p>
<p>那Hosts文件的作用是什么呢？它里面保存的就是域名和IP的对应关系。每一行保存一个IP地址和一个域名，这样当我们在使用浏览器访问对应域名的时候就相当于直接访问我们设置好的IP地址。</p>
<h3 id="Hosts文件的位置"><a href="#Hosts文件的位置" class="headerlink" title="Hosts文件的位置"></a>Hosts文件的位置</h3><table>
<thead>
<tr>
<th style="text-align:left">操作系统</th>
<th style="text-align:center">Hosts文件位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Windows</td>
<td style="text-align:center"><code>%SystemRoot%\System32\drivers\etc\hosts</code></td>
</tr>
<tr>
<td style="text-align:left">Mac</td>
<td style="text-align:center"><code>/etc/hosts</code></td>
</tr>
</tbody>
</table>
<h3 id="如何获取最新的Hosts配置"><a href="#如何获取最新的Hosts配置" class="headerlink" title="如何获取最新的Hosts配置"></a>如何获取最新的Hosts配置</h3><p>由于城墙防御的升级，我们配置Hosts所使用的IP地址过一段时间就有可能被发现，从而被封锁，所以我们需要不断更新Hosts配置以逃避封锁。</p>
<p>如何获取最新的Hosts配置，请访问：</p>
<ul>
<li><a href="https://v2say.com/hosts.txt" target="_blank" rel="external">2017年4月份最新Hosts配置</a></li>
<li><a href="https://v2say.com/hosts.txt" target="_blank" rel="external">2017年5月份最新Hosts配置</a></li>
</ul>
<h3 id="该方法的优势和劣势"><a href="#该方法的优势和劣势" class="headerlink" title="该方法的优势和劣势"></a>该方法的优势和劣势</h3><p>作为最简单粗暴的跨越长城的姿势，修改Hosts方法为大多数懒癌患者所喜爱。只需要拿到最新的Hosts配置，并复制到我们操作系统的Hosts文件中保存即可。</p>
<p><strong>注意：</strong>为了保证我们配置的Hosts立即生效，我们还需要做以下几个操作，以Windows 为例：</p>
<ol>
<li>通过<code>win</code> + <code>R</code>,打开<code>运行</code>,输入<code>cmd</code></li>
<li>输入命令<code>ipconfig /flushdns</code></li>
<li>重启浏览器访问<a href="https://www.google.com.hk" target="_blank" rel="external">谷歌</a></li>
</ol>
<p>下一篇我们将介绍如何通过浏览器插件<code>SwitchyOmega</code>优雅翻越长城。</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2017最新Hosts </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> 最简单的方法使用Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取微信公众号所有历史文章(续)]]></title>
      <url>/2017/05/02/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E7%BB%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>@(微信公众号小技巧)[微信公众号|所有历史文章]</p>
<p><strong>上一篇</strong>我们介绍了如何通过<strong>Fiddler</strong> 和 <strong>Chrome</strong> 得到知名大V所有历史文章的接口。那拿到接口之后该怎么办呢？你需要一个程序员，嗯！(ง •̀_•́)ง</p>
<blockquote>
<p><strong>郑重声明：</strong><br>该方法获取微信公众号历史文章仅供参考，请勿恶意使用。另外说明一下，微信本身&gt; 对于抓取数据的接口已经做了限制，如果频繁使用该接口进行数据抓取，微信会暂时&gt; 禁止当前微信号获取所有公众号的历史文章。目测当前的禁止时间为5分钟。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="接口简化"><a href="#接口简化" class="headerlink" title="接口简化"></a>接口简化</h2><p><strong>上一篇</strong>最后我们通过Chrome已经看到获取文章列表的URL<code>https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=MzI0MjA1Mjg2Ng==&amp;f=json&amp;frommsgid=1000000134XXXXX</code>, URL 太长，后面的大串字符我以<code>XXXXX</code>代替。格式化之后如下图所示</p>
</blockquote>
<p>为了简化接口，我们把没必要的参数删除，最后发现只有这几个参数是必须的</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">参数值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">action</td>
<td style="text-align:left">getmsg</td>
<td style="text-align:left">这个URL的目的是干嘛的？获取message（消息）的</td>
</tr>
<tr>
<td style="text-align:left">__biz</td>
<td style="text-align:left">MzI0MjA1Mjg2Ng==</td>
<td style="text-align:left">这个参数与微信公众号一一对应，每个公众号都不一样</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">json</td>
<td style="text-align:left">获取数据的格式是JSON</td>
</tr>
<tr>
<td style="text-align:left">frommsgid</td>
<td style="text-align:left">1000000134</td>
<td style="text-align:left">公众号文章的ID，该接口返回从该ID开始的10篇文章</td>
</tr>
</tbody>
</table>
<p>公众号历史文章以时间顺序排列，离当前时间最近的文章排在最前面，因此我们可以得到以下规律第一篇文章的ID为1000000142，后续应该是<strong>1000000141，1000000140… …1000000133</strong>，总共10个ID。在获取文章列表后，以最后一篇文章的ID作为拼接下一个URL的<strong>frommsgid</strong>，其他参数不变。这样就可以循环获取所有的历史文章了。</p>
<h2 id="自动化获取"><a href="#自动化获取" class="headerlink" title="自动化获取"></a>自动化获取</h2><p>我们知道了获取历史文章的规律后，接下来就是怎么通过程序来实现自动获取并输出内容。<br>URL <code>https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=MzI0MjA1Mjg2Ng==&amp;f=json&amp;frommsgid=1000000134</code> 是真实的可用的地址，在我的浏览器中执行的结果如下，其中参数已经通过红色框标注。</p>
<p>那你把这个URL拷贝到自己的浏览器中可用看到同样的结果吗？不出意外的话是不可以的。原因就是因为这个接口的正常使用是有条件的，那就是必须获得鉴权。那如何使得浏览器获得跟<strong>微信客户端</strong>同样的权利，然后再使用该接口呢？</p>
<p>这个就不用麻烦大家自己去测试接口了。经过测试发现在<strong>Fiddler</strong>最开始的响应中有两个Cookie的写入操作，如下图所示</p>
<p>我们将这两个Cookie写入浏览器，就可以通过以上简单的URL获取公众号历史文章了。另外如果想通过程序自动获取，那只需要在请求的时候带上这两个Cookie内容，并不断修改<strong>frommsgid</strong>就可以获取公众号所有的历史文章了。</p>
<p><code>最后再次说明一下，频繁请求会被禁止访问所有公众号的历史文章</code> ⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄.  </p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号历史文章 </tag>
            
            <tag> 所有历史文章 </tag>
            
            <tag> caoz的梦呓 </tag>
            
            <tag> 小道消息 </tag>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取微信公众号所有历史文章]]></title>
      <url>/2017/04/25/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="如何获取公众号所有历史文章"><a href="#如何获取公众号所有历史文章" class="headerlink" title="如何获取公众号所有历史文章"></a>如何获取公众号所有历史文章</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>微信公众号历史文章的查看大家都会，公众号里有历史文章可以翻阅。但要想看一年前的历史文章怎么办，一页一页翻？有人说历史文章可以搜索，那如果不记得文章内容或关键字怎么办。</p>
<p>那一天你正在查看某知名大V（譬如 caoz）的历史文章，看的津津有味，这个时候女朋友的微信来了，你说是回还是不回。回完微信，再次翻阅历史或者搜索又是一阵忙碌，内心很是崩溃。这里分享一个方法教大家如何获取微信公众号的所有历史文章，你需要准备以下几个软件：</p>
<p><strong>Fiddler</strong> ：HTTP 代理工具，可以帮我们找到公众号历史文章的链接地址<br><strong>chrome</strong> ：谷歌浏览器，可以帮我们查找微信公众号历史文章的链接规律<br><strong>微信 Windows 版</strong> ：为了方便操作，当然手机微信也可以，将手机代理改为 Fiddler 即可</p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>安装 Fiddler 并将 Fiddler 设置为电脑全局代理。打开Fiddler，点击工具栏菜单Tools–&gt;Telerik Fiddler Options–&gt;Connections。设置代理端口并勾选作为系统代理选项<br><a id="more"></a></p>
<p>##访问公众号历史文章<br>通过 Windows 版微信访问公众号历史文章，以caoz的公众号（caoz的梦呓）为例。点击公众号历史文章按钮，查看 Fiddler 窗口中所展示的所有链接，右键点击蓝色链接（如下图）并拷贝该URL，在 Chrome 中打开链接，此时可以看到我们在浏览器中可以查看公众号的所有历史文章。</p>
<p>##获取公众号历史文章接口<br>在 Chrome 浏览器打开历史文章列表后，按F12打开 Chrome 的开发工具。如图所示选中XHR,在下拉公众号历史文章列表的过程中，我们可以看到有左边的链接和右边的结果。此时的结果是JSON字符串，由此我们可以断定这就是微信公众号历史文章的接口及结果集。</p>
<p><strong>注意</strong><br><code>图文版详情请关注下图公众号查看</code></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号历史文章 </tag>
            
            <tag> 所有历史文章 </tag>
            
            <tag> caoz的梦呓 </tag>
            
            <tag> 小道消息 </tag>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 官方教程内联（Inline）语法（二）]]></title>
      <url>/2017/04/01/Markdown%20%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E5%86%85%E8%81%94%EF%BC%88Inline%EF%BC%89%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>内联元素指的是与行内元素，与块状元素相对应。主要包括链接，代码，强调，图片等元素。块状元素的 Markdown 语法可以参考<a href="https://v2say.com/2017/03/20/Markdown 官方教程块级（Block）语法（一）/" target="_blank" rel="external">上一篇</a></p>
<hr>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种风格的链接: <strong>行内链接</strong> 和 <strong>引用链接</strong>。</p>
<p>两种风格的链接均用中括号扩起来 [ ]。<br><a id="more"></a><br>行内链接由两部分组成，方括号<code>[ ]</code>括起来的链接描述，以及紧跟方括号的链接地址，地址由括弧<code>( )</code>包围。括弧内可以选择为该链接添加标题。例如：</p>
<pre><code>   This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>如果想要链接到当前服务器的页面，链接地址可以是相对地址：</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p>引用类型的链接采用两对方括号进行表示，其中第一个方括号内容为链接的描述信息，第二个内容为链接的ID：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>然后，你需要做的是在文档的任何位置，定义 ID 所对应的链接：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>规则说明：</p>
<ul>
<li>ID 由方括号包围 ，距离左边距不超过 3 个空格</li>
<li>一个冒号</li>
<li>一个或多个空格</li>
<li>链接地址</li>
<li>链接标题—可以由单引号，双引号或者括号包围起来</li>
</ul>
<p>以下三种表达方式是等价的：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>注意：</strong> 链接名称可以由字母，数字，空格等组成，但是链接是大小写不敏感的，即链接大小写是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p>是一样的。</p>
<p>关于链接也可以简写如下：</p>
<pre><code>[Google][]
</code></pre><p>然后链接的定义如下：</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>下面是一个使用的示范：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

[1]: http://google.com/        &quot;Google&quot;
[2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
[3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>简写的方式如下：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>为了对比写法上的区别，将行内链接的写法也贴出来：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>由此可以看出来，引用链接的方式看起来更加利于编写和阅读。</p>
<hr>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用 (<code>*</code>) 和 (<code>_</code>) 来标记强调的字符。单个 <code>*</code> 或 <code>_</code> 最终被转化为<br>HTML <code>&lt;em&gt;</code> 标签；两个 <code>*</code> 或 <code>_</code>最终被转化为 HTML<br><code>&lt;strong&gt;</code> 标签：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>将会转化为：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p><strong>注意：</strong> <code>*</code> 和 <code>_</code> 两侧不能有空格，否则会被当作单独字符处理。如果想要单独输出以上两个字符，则需要在字符前加 <code>\</code> 做转义。</p>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我们可以使用两个 (<code>` </code>) 来包围表示一段代码：</p>
<pre><code>Use the `printf()` function.
</code></pre><p>将会转化为：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>在代码块中使用 `，必需在代码块起始和末尾加入多个`：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>在代码块内部，符合和尖括号会被自动转义为 HTML 实体：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>会被转化为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><hr>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 中的图片语法与链接类似，也分为行内图片和引用两种。</p>
<p>行内图片语法如下：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>规则如下：</p>
<ul>
<li>语法说明字符<code>!</code>开头</li>
<li>一对方括号，包含图片的 <code>alt</code> 属性</li>
<li>一对括弧包含图片的地址，还可选择性的加上图片的标题 <code>title</code> </li>
</ul>
<p>引用型的图片语法如下：</p>
<pre><code>![Alt text][id]
</code></pre><p><code>id</code> 是图片的引用地址，其定义的语法与链接完全一致：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>该表示方法没有设置图片大小的语法，如果想要设置，则可以直接食用 HTML <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><hr>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持为 URL 和 email 自动生成链接。你需要做的就是用尖括号把地址括起来：</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown 会将上面的句子转化为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>email的自动链接与 URL 基本一致，不同的地方在于为了防止 email 地址被 spambots 处理，故进行了转义：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>会被 Markdown 解析为：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>在浏览器中可以被转化为可以点击的 email 地址 “address@example.com”</p>
<hr>
<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 语法可以使用反斜线 <code>\</code> 来表示字符本身。如果想要在文字中展示 <code>*</code> ，则需要在 <code>*</code> 前加上反斜线：</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown 支持用反斜线的字符：</p>
<pre><code>\   反斜线
`   点号
*   星号
_   下划线
{}  大括号
[]  方括号
()  小括弧
#   井号
+    加号
-    减号
.   英文句号
!   感叹号
</code></pre>]]></content>
      
        <categories>
            
            <category> popular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown Grammar </tag>
            
            <tag> JOHN GRUBER </tag>
            
            <tag> Markdown语法 </tag>
            
            <tag> 10分钟学会Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 官方教程块级（Block）语法（一）]]></title>
      <url>/2017/03/20/Markdown%20%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E5%9D%97%E7%BA%A7%EF%BC%88Block%EF%BC%89%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Markdown 语法<br>参考：JOHN GRUBER「Markdown 语法作者」<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">个人网站</a></p>
<p><strong>注:</strong> 该文档就是采用 Markdown 语法进行编辑的。</p>
<hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 标记语言产生的意义就是让文本编辑能够更容易的读和写。</p>
<p>Markdown 注重可读性。可发布的 Markdown 标记的文档应该是纯文本，不应该包含用来格式化的标记。Markdown 语法由标点符号标记，标点符号的选择尽量展示其最原始的含义。例如用<code>*</code>强调，<code>&gt;</code>表示引用等等。</p>
<p>Markdown 并不是 HTML 的替代品，它仅仅支持 HTML 的部分标签。HTML 是<strong>发布</strong>格式，Markdown 是<strong>书写</strong>格式。如果想要使用HTML中的其他标签，可以直接在Markdown文档中使用。</p>
<p>Markdown语法对块级别的HTML元素有使用限制，例如 <code>&lt;div&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;pre&gt;</code>，<code>&lt;p&gt;</code>等等。在使用的时候必须在块的头和尾加入空行，并且头和尾标记不能有缩进。</p>
<a id="more"></a>
<p>例如在Markdown文档中添加HTML表格语法如下:</p>
<pre><code>上一段落

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;table content&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

下一段落
</code></pre><p><strong>注意:</strong> Markdown语法在上述块内不起作用，例如在HTML块中使用<strong>强调</strong>不起作用。</p>
<p>内联级别的 HTML 标签，例如 <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code> 或者 <code>&lt;del&gt;</code> 可以在任何地方使用。和块级 HTML 标签不一样的地方就是，Markdown 语法<strong>会解析</strong>内联级别内的内容。</p>
<hr>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在 HTML 中，<code>&lt;</code> 和 <code>&amp;</code> 需要特殊处理。<code>&lt;</code> 标示标签的开始，<code>&amp;</code> 标示HTML实体。如果要使用，必须采用 <code>&amp;lt;</code>和<code>&amp;amp;</code>来标示&lt;和&amp;。这个是比较麻烦的一点，例如要写“AT&amp;T”，在 Markdown 文档中必须写作 <code>AT&amp;amp;T</code>。甚至在文档中插入 URL，也需要转义，例如：</p>
<pre><code>https://v2say.com/popular?page=1&amp;num=10
</code></pre><p>必须写作：</p>
<pre><code>https://v2say.com/popular?page=1&amp;amp;num=10
</code></pre><p>需要记住以上必须转义的地方，例如 <code>&amp;copy</code> 即 &copy; 标示版权的标记就不需要转义。</p>
<hr>
<h2 id="区块标记"><a href="#区块标记" class="headerlink" title="区块标记"></a>区块标记</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一段话由一行或多行文本组成，并由一个或多个空行「仅包含tab 或 空格」隔开。如果想要另起一段，则在句末添加两个或多个空格，然后再回车。</p>
<hr>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题标示法：</p>
<p>标题下方用等号或者短横标示，例如：<br>    大标题<br>   =<br>    小标题<br>    -</p>
<p><code>=</code> 和 <code>-</code> 的数量不限</p>
<p>用 <code>#</code> 在标题头部标示， <code>#</code> 后保留一个空格:</p>
<pre><code># 一号标题
## 二号标题
###### 六号标题
</code></pre><hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>Markdown 使用 <code>&gt;</code> 标示引用段落。最好在每行之前添加 <code>&gt;</code> :</p>
<pre><code>&gt; 这
&gt; 是
&gt; 引
&gt; 
&gt; 用
</code></pre><p>效果如下：</p>
<blockquote>
<p>这<br>是<br>引</p>
<p>用</p>
</blockquote>
<p>引用可以嵌套，需要在引用内部再添加一层 <code>&gt;</code>:</p>
<pre><code>&gt; 引用一
&gt;
&gt; &gt; 引用二
&gt;
&gt; 引用一
</code></pre><p>效果如下：</p>
<blockquote>
<p>引用一</p>
<blockquote>
<p>引用二</p>
</blockquote>
<p>引用一</p>
</blockquote>
<p>引用块可以包含其他 Markdown 元素, 包括 headers, lists, code:</p>
<pre><code>&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here&apos;s some example code:
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>效果如下：</p>
<blockquote>
<ol>
<li>第一条</li>
<li>第二条</li>
</ol>
<p>代码段:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></blockquote>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序和无序列表</p>
<p>无序列表以 <code>*</code>，<code>+</code>，<code>-</code> 在行首标示– 以下3种表示是等价的：</p>
<pre><code>*   Red
*   Green
*   Blue

+   Red
+   Green
+   Blue

-   Red
-   Green
-   Blue
</code></pre><p>有序列表由英文句号标示:</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>如果某个列表中包含多个段落，保证每行起始距页边4个空格或一个tab。</p>
<pre><code>1.  第一段

    第二段

2.  第二条
</code></pre><p>在列表中添加引用， <code>&gt;</code> 符号需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>效果如下：</p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br>inside a list item.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>引用代码块需要在行首添加4个空格或1个tab：</p>
<pre><code>代码块标示如下:

    public static void main(){
        return;
    }
</code></pre><p>效果如下：</p>
<pre><code>public static void main(){
    return;
}
</code></pre><p>代码块会持续到下一个无缩进的行或文章末尾。</p>
<p>在代码块中，<code>&amp;</code>，<code>&lt;</code> 和 <code>&gt;</code> 会自动转换为 HTML 实体，其他普通的 Markdown 语法不会被 Markdown 语法解析。例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;

**strong**
</code></pre><p>转化后如下：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre><hr>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>由三个或以上的<code>*</code>，<code>-</code>标示水平分割线:</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><hr>
]]></content>
      
        <categories>
            
            <category> popular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JOHN GRUBER </tag>
            
            <tag> Markdown </tag>
            
            <tag> GitHub GFM Grammar </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
